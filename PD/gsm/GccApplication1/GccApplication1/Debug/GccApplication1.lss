
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  0000015a  000001ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000938  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000051b  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a5  00000000  00000000  00000ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036f  00000000  00000000  00001078  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000013e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000012d  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000070  00000000  00000000  00001589  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e5       	ldi	r30, 0x5A	; 90
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  8a:	0c 94 ab 00 	jmp	0x156	; 0x156 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <usart_init>:
	}
}

void usart_init()
{
	UCSRB=UCSRB|1<<TXEN|1<<RXEN; //TRANSMITTER ENABLE REGISTER B AND RECEIVER ENABLE REG B
  92:	8a b1       	in	r24, 0x0a	; 10
  94:	88 61       	ori	r24, 0x18	; 24
  96:	8a b9       	out	0x0a, r24	; 10
	UCSRC=UCSRC|1<<URSEL|1<<UCSZ0|1<<UCSZ1; //REGC ENABLE ,CHARACTER SIZE FROM UCSZ0 AND UCSZ1
  98:	80 b5       	in	r24, 0x20	; 32
  9a:	86 68       	ori	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32
	UBRRL=0X33; //UBRRC LOWER BYTE WITH 51
  9e:	83 e3       	ldi	r24, 0x33	; 51
  a0:	89 b9       	out	0x09, r24	; 9
}
  a2:	08 95       	ret

000000a4 <TX_strig>:

void TX_strig (char *x)
{
  a4:	fc 01       	movw	r30, r24
  while(*x !='\0')
  a6:	80 81       	ld	r24, Z
  a8:	88 23       	and	r24, r24
  aa:	39 f0       	breq	.+14     	; 0xba <TX_strig+0x16>
	UCSRB=UCSRB|1<<TXEN|1<<RXEN; //TRANSMITTER ENABLE REGISTER B AND RECEIVER ENABLE REG B
	UCSRC=UCSRC|1<<URSEL|1<<UCSZ0|1<<UCSZ1; //REGC ENABLE ,CHARACTER SIZE FROM UCSZ0 AND UCSZ1
	UBRRL=0X33; //UBRRC LOWER BYTE WITH 51
}

void TX_strig (char *x)
  ac:	31 96       	adiw	r30, 0x01	; 1
{
  while(*x !='\0')
  {  
	  UDR=*x;
  ae:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA&(1<<UDRE))==0);
  b0:	5d 9b       	sbis	0x0b, 5	; 11
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <TX_strig+0xc>
	UBRRL=0X33; //UBRRC LOWER BYTE WITH 51
}

void TX_strig (char *x)
{
  while(*x !='\0')
  b4:	81 91       	ld	r24, Z+
  b6:	88 23       	and	r24, r24
  b8:	d1 f7       	brne	.-12     	; 0xae <TX_strig+0xa>
  ba:	08 95       	ret

000000bc <GSM>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	94 e3       	ldi	r25, 0x34	; 52
  c0:	ac e0       	ldi	r26, 0x0C	; 12
  c2:	81 50       	subi	r24, 0x01	; 1
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	a0 40       	sbci	r26, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <GSM+0x6>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <GSM+0x10>
  cc:	00 00       	nop

void GSM()
{
	char ctrlz[]={26};
		_delay_ms(500);
	TX_strig("ATD9990480092;\r");
  ce:	80 e6       	ldi	r24, 0x60	; 96
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 52 00 	call	0xa4	; 0xa4 <TX_strig>
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	93 ed       	ldi	r25, 0xD3	; 211
  da:	a0 e3       	ldi	r26, 0x30	; 48
  dc:	81 50       	subi	r24, 0x01	; 1
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	a0 40       	sbci	r26, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <GSM+0x20>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <GSM+0x2a>
  e6:	00 00       	nop
	_delay_ms(2000);
	//TX_strig(ctrlz);
   
}
  e8:	08 95       	ret

000000ea <gsm1>:

void gsm1()
{
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	0f 92       	push	r0
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
	char ctrlz[]={26};
  f4:	8a e1       	ldi	r24, 0x1A	; 26
  f6:	89 83       	std	Y+1, r24	; 0x01
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	94 e3       	ldi	r25, 0x34	; 52
  fc:	ac e0       	ldi	r26, 0x0C	; 12
  fe:	81 50       	subi	r24, 0x01	; 1
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	a0 40       	sbci	r26, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <gsm1+0x14>
 106:	00 c0       	rjmp	.+0      	; 0x108 <gsm1+0x1e>
 108:	00 00       	nop
		_delay_ms(500);
	 TX_strig("ATH\r");
 10a:	80 e7       	ldi	r24, 0x70	; 112
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 52 00 	call	0xa4	; 0xa4 <TX_strig>
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	93 ed       	ldi	r25, 0xD3	; 211
 116:	a0 e3       	ldi	r26, 0x30	; 48
 118:	81 50       	subi	r24, 0x01	; 1
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	a0 40       	sbci	r26, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <gsm1+0x2e>
 120:	00 c0       	rjmp	.+0      	; 0x122 <gsm1+0x38>
 122:	00 00       	nop
	 _delay_ms(2000);
	 TX_strig(ctrlz);
 124:	ce 01       	movw	r24, r28
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	0e 94 52 00 	call	0xa4	; 0xa4 <TX_strig>
 12c:	0f 90       	pop	r0
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <main>:
void GSM();
void gsm1();
int main(void)
{
	
	 DDRA|=(1<<2);
 134:	d2 9a       	sbi	0x1a, 2	; 26
	 usart_init();
 136:	0e 94 49 00 	call	0x92	; 0x92 <usart_init>
	while(1)
	{
		
		if(PINA&(1<<0)) //calling
 13a:	c8 9b       	sbis	0x19, 0	; 25
 13c:	04 c0       	rjmp	.+8      	; 0x146 <main+0x12>
		{
		    GSM();
 13e:	0e 94 5e 00 	call	0xbc	; 0xbc <GSM>
			PORTA|=1<<2;
 142:	da 9a       	sbi	0x1b, 2	; 27
 144:	fa cf       	rjmp	.-12     	; 0x13a <main+0x6>
			
		}
		
		else if (PINA&(1<<1))
 146:	c9 9b       	sbis	0x19, 1	; 25
 148:	f8 cf       	rjmp	.-16     	; 0x13a <main+0x6>
		{
			gsm1();
 14a:	0e 94 75 00 	call	0xea	; 0xea <gsm1>
			PORTA&=~1<<2;
 14e:	8b b3       	in	r24, 0x1b	; 27
 150:	88 7f       	andi	r24, 0xF8	; 248
 152:	8b bb       	out	0x1b, r24	; 27
 154:	f2 cf       	rjmp	.-28     	; 0x13a <main+0x6>

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
