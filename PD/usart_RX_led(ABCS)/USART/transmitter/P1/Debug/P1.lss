
P1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000114  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000415  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000153  00000000  00000000  00000d75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000340  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001208  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000f5  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000070  00000000  00000000  00001351  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 83 00 	call	0x106	; 0x106 <main>
  8a:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <usart_init>:
#include <avr/io.h>
#include <util/delay.h>

void usart_init()
{
	UCSRB=UCSRB|1<<TXEN|1<<RXEN;
  92:	8a b1       	in	r24, 0x0a	; 10
  94:	88 61       	ori	r24, 0x18	; 24
  96:	8a b9       	out	0x0a, r24	; 10
	UCSRC=UCSRC|1<<URSEL|1<<UCSZ0|1<<UCSZ1;
  98:	80 b5       	in	r24, 0x20	; 32
  9a:	86 68       	ori	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32
	UBRRL=51;
  9e:	83 e3       	ldi	r24, 0x33	; 51
  a0:	89 b9       	out	0x09, r24	; 9
}
  a2:	08 95       	ret

000000a4 <Rx>:

void Rx()
{
	UDR='A';
  a4:	81 e4       	ldi	r24, 0x41	; 65
  a6:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA&(1<<UDRE))==0)
  a8:	5d 99       	sbic	0x0b, 5	; 11
  aa:	05 c0       	rjmp	.+10     	; 0xb6 <Rx+0x12>
	{
		PORTA=PORTA&1<<0X01;		
  ac:	8b b3       	in	r24, 0x1b	; 27
  ae:	82 70       	andi	r24, 0x02	; 2
  b0:	8b bb       	out	0x1b, r24	; 27
}

void Rx()
{
	UDR='A';
	while((UCSRA&(1<<UDRE))==0)
  b2:	5d 9b       	sbis	0x0b, 5	; 11
  b4:	fb cf       	rjmp	.-10     	; 0xac <Rx+0x8>
	{
		PORTA=PORTA&1<<0X01;		
	}
		UDR='B';
  b6:	82 e4       	ldi	r24, 0x42	; 66
  b8:	8c b9       	out	0x0c, r24	; 12
		while((UCSRA&(1<<UDRE))==0)
  ba:	5d 99       	sbic	0x0b, 5	; 11
  bc:	05 c0       	rjmp	.+10     	; 0xc8 <Rx+0x24>
		
		{
			PORTA=PORTA&1<<0X02;
  be:	8b b3       	in	r24, 0x1b	; 27
  c0:	84 70       	andi	r24, 0x04	; 4
  c2:	8b bb       	out	0x1b, r24	; 27
	while((UCSRA&(1<<UDRE))==0)
	{
		PORTA=PORTA&1<<0X01;		
	}
		UDR='B';
		while((UCSRA&(1<<UDRE))==0)
  c4:	5d 9b       	sbis	0x0b, 5	; 11
  c6:	fb cf       	rjmp	.-10     	; 0xbe <Rx+0x1a>
		
		{
			PORTA=PORTA&1<<0X02;
	}
	UDR='C';
  c8:	83 e4       	ldi	r24, 0x43	; 67
  ca:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA&(1<<UDRE))==0)
  cc:	5d 99       	sbic	0x0b, 5	; 11
  ce:	05 c0       	rjmp	.+10     	; 0xda <Rx+0x36>
	
	{
		PORTA=PORTA&1<<0X03;
  d0:	8b b3       	in	r24, 0x1b	; 27
  d2:	88 70       	andi	r24, 0x08	; 8
  d4:	8b bb       	out	0x1b, r24	; 27
		
		{
			PORTA=PORTA&1<<0X02;
	}
	UDR='C';
	while((UCSRA&(1<<UDRE))==0)
  d6:	5d 9b       	sbis	0x0b, 5	; 11
  d8:	fb cf       	rjmp	.-10     	; 0xd0 <Rx+0x2c>
  da:	08 95       	ret

000000dc <usart_string>:
	
	
}

void usart_string(char *x)
{
  dc:	fc 01       	movw	r30, r24
	while(*x !='\0')
  de:	80 81       	ld	r24, Z
  e0:	88 23       	and	r24, r24
  e2:	81 f0       	breq	.+32     	; 0x104 <usart_string+0x28>
	}
	
	
}

void usart_string(char *x)
  e4:	31 96       	adiw	r30, 0x01	; 1
{
	while(*x !='\0')
	{
		UDR=*x;
  e6:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA&(1<<UDRE))==0){}
  e8:	5d 9b       	sbis	0x0b, 5	; 11
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <usart_string+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	8f e3       	ldi	r24, 0x3F	; 63
  ee:	9d e0       	ldi	r25, 0x0D	; 13
  f0:	a3 e0       	ldi	r26, 0x03	; 3
  f2:	81 50       	subi	r24, 0x01	; 1
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	a0 40       	sbci	r26, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <usart_string+0x16>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <usart_string+0x20>
  fc:	00 00       	nop
	
}

void usart_string(char *x)
{
	while(*x !='\0')
  fe:	81 91       	ld	r24, Z+
 100:	88 23       	and	r24, r24
 102:	89 f7       	brne	.-30     	; 0xe6 <usart_string+0xa>
 104:	08 95       	ret

00000106 <main>:
}


int main(void)
{
	DDRA=0XFF;
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	8a bb       	out	0x1a, r24	; 26
	usart_init();
 10a:	0e 94 49 00 	call	0x92	; 0x92 <usart_init>
 10e:	ff cf       	rjmp	.-2      	; 0x10e <main+0x8>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
