
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000013a  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000910  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000543  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000017a  00000000  00000000  00000ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000372  00000000  00000000  0000104d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000013c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000118  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000095  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  8a:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_data>:
	
}

void lcd_data(char x)
{
	PORTB=x;
  92:	88 bb       	out	0x18, r24	; 24
	PORTA=PORTA|1<<rs;
  94:	da 9a       	sbi	0x1b, 2	; 27
	PORTA=PORTA&~(1<<rw);
  96:	de 98       	cbi	0x1b, 6	; 27
	PORTA=PORTA|1<<en;
  98:	d8 9a       	sbi	0x1b, 0	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	89 ef       	ldi	r24, 0xF9	; 249
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_data+0xc>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <lcd_data+0x12>
  a4:	00 00       	nop
	_delay_ms(1);
	PORTA=PORTA&~(1<<en);
  a6:	d8 98       	cbi	0x1b, 0	; 27
  a8:	89 ef       	ldi	r24, 0xF9	; 249
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <lcd_data+0x1a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <lcd_data+0x20>
  b2:	00 00       	nop
	_delay_ms(1);
}
  b4:	08 95       	ret

000000b6 <lcd_cmd>:


void lcd_cmd(char x)
{
	PORTB=x;
  b6:	88 bb       	out	0x18, r24	; 24
				PORTA=PORTA&~(1<<rs);
  b8:	da 98       	cbi	0x1b, 2	; 27
				PORTA=PORTA&~(1<<rw);
  ba:	de 98       	cbi	0x1b, 6	; 27
				PORTA=PORTA|(1<<en);
  bc:	d8 9a       	sbi	0x1b, 0	; 27
  be:	89 ef       	ldi	r24, 0xF9	; 249
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_cmd+0xc>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_cmd+0x12>
  c8:	00 00       	nop
				_delay_ms(1);
				PORTA=PORTA&~(1<<en);
  ca:	d8 98       	cbi	0x1b, 0	; 27
  cc:	89 ef       	ldi	r24, 0xF9	; 249
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_cmd+0x1a>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <lcd_cmd+0x20>
  d6:	00 00       	nop
				_delay_ms(1);
				
}
  d8:	08 95       	ret

000000da <lcd_init>:
    }
}

void lcd_init()
{
	lcd_cmd(0x38);
  da:	88 e3       	ldi	r24, 0x38	; 56
  dc:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_cmd>
	lcd_cmd(0x0e);
  e0:	8e e0       	ldi	r24, 0x0E	; 14
  e2:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_cmd>
	lcd_cmd(0x06);
  e6:	86 e0       	ldi	r24, 0x06	; 6
  e8:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_cmd>
	
}
  ec:	08 95       	ret

000000ee <lcd_string>:
				_delay_ms(1);
				
}

void lcd_string(char *x)
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	ec 01       	movw	r28, r24
	while(*x !='\0')
  f4:	88 81       	ld	r24, Y
  f6:	88 23       	and	r24, r24
  f8:	31 f0       	breq	.+12     	; 0x106 <lcd_string+0x18>
				PORTA=PORTA&~(1<<en);
				_delay_ms(1);
				
}

void lcd_string(char *x)
  fa:	21 96       	adiw	r28, 0x01	; 1
{
	while(*x !='\0')
	{
		lcd_data(*x);
  fc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_data>
				
}

void lcd_string(char *x)
{
	while(*x !='\0')
 100:	89 91       	ld	r24, Y+
 102:	88 23       	and	r24, r24
 104:	d9 f7       	brne	.-10     	; 0xfc <lcd_string+0xe>
	{
		lcd_data(*x);
		x++;
	}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <main>:
void lcd_cmd(char x);
void lcd_data(char x);
void lcd_init();
int main(void)
{
	DDRA=DDRA|1<<0|1<<2|1<<6;
 10c:	8a b3       	in	r24, 0x1a	; 26
 10e:	85 64       	ori	r24, 0x45	; 69
 110:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xff;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	87 bb       	out	0x17, r24	; 23
	
	lcd_init();
 116:	0e 94 6d 00 	call	0xda	; 0xda <lcd_init>
	lcd_string("sdagkjdhgdfg;");
 11a:	80 e6       	ldi	r24, 0x60	; 96
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 77 00 	call	0xee	; 0xee <lcd_string>
	
	
    while(1)
    {
		lcd_cmd(0x1c);
 122:	8c e1       	ldi	r24, 0x1C	; 28
 124:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_cmd>
 128:	87 ea       	ldi	r24, 0xA7	; 167
 12a:	91 e6       	ldi	r25, 0x61	; 97
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <main+0x20>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x26>
 132:	00 00       	nop
 134:	f6 cf       	rjmp	.-20     	; 0x122 <main+0x16>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
