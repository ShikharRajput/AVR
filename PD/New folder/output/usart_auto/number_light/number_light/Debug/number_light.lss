
number_light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000100  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006c  0080006c  000001a0  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  000008f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003cc  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000100  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000029e  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000010e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000c8  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000014  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 77 00 	call	0xee	; 0xee <main>
  8a:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <usart_init>:
	}
}

void usart_init()
{
	UCSRB=UCSRB|1<<RXEN;
  92:	54 9a       	sbi	0x0a, 4	; 10
	UCSRC=UCSRC|1<<URSEL|1<<UCSZ0|1<<UCSZ1;
  94:	80 b5       	in	r24, 0x20	; 32
  96:	86 68       	ori	r24, 0x86	; 134
  98:	80 bd       	out	0x20, r24	; 32
	UBRRL=0x33;
  9a:	83 e3       	ldi	r24, 0x33	; 51
  9c:	89 b9       	out	0x09, r24	; 9
}
  9e:	08 95       	ret

000000a0 <rx>:

char rx()
{
  a0:	e0 e6       	ldi	r30, 0x60	; 96
  a2:	f0 e0       	ldi	r31, 0x00	; 0
	UCSRB=UCSRB|1<<RXEN;
	UCSRC=UCSRC|1<<URSEL|1<<UCSZ0|1<<UCSZ1;
	UBRRL=0x33;
}

char rx()
  a4:	cf 01       	movw	r24, r30
  a6:	0c 96       	adiw	r24, 0x0c	; 12
{
//while((UCSRA&(1<<RXC))==0){}
	
for(int i=0; i<=11; i++){
	while((UCSRA&(1<<RXC))==0){}
  a8:	5f 9b       	sbis	0x0b, 7	; 11
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <rx+0x8>
		x = UDR;
  ac:	2c b1       	in	r18, 0x0c	; 12
  ae:	20 93 6e 00 	sts	0x006E, r18
		if(x != arr[i]){
  b2:	31 91       	ld	r19, Z+
  b4:	23 17       	cp	r18, r19
  b6:	69 f4       	brne	.+26     	; 0xd2 <rx+0x32>
			break;
		}a++;
  b8:	20 91 6c 00 	lds	r18, 0x006C
  bc:	30 91 6d 00 	lds	r19, 0x006D
  c0:	2f 5f       	subi	r18, 0xFF	; 255
  c2:	3f 4f       	sbci	r19, 0xFF	; 255
  c4:	30 93 6d 00 	sts	0x006D, r19
  c8:	20 93 6c 00 	sts	0x006C, r18

char rx()
{
//while((UCSRA&(1<<RXC))==0){}
	
for(int i=0; i<=11; i++){
  cc:	e8 17       	cp	r30, r24
  ce:	f9 07       	cpc	r31, r25
  d0:	59 f7       	brne	.-42     	; 0xa8 <rx+0x8>
		x = UDR;
		if(x != arr[i]){
			break;
		}a++;
	
}if(a==12){
  d2:	80 91 6c 00 	lds	r24, 0x006C
  d6:	90 91 6d 00 	lds	r25, 0x006D
  da:	8c 30       	cpi	r24, 0x0C	; 12
  dc:	91 05       	cpc	r25, r1
  de:	11 f4       	brne	.+4      	; 0xe4 <rx+0x44>
		PORTA = 0x01;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	8b bb       	out	0x1b, r24	; 27
	}a = 0;
  e4:	10 92 6d 00 	sts	0x006D, r1
  e8:	10 92 6c 00 	sts	0x006C, r1
  ec:	08 95       	ret

000000ee <main>:
int a = 0;
char rx();
char x;
int main(void)
{
	DDRA=0x01;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	8a bb       	out	0x1a, r24	; 26
	usart_init();
  f2:	0e 94 49 00 	call	0x92	; 0x92 <usart_init>
	while(1)
	{
		rx() ;
  f6:	0e 94 50 00 	call	0xa0	; 0xa0 <rx>
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <main+0x8>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
