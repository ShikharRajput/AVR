
attan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000216  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00000216  000002aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800098  00800098  000002e2  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000b20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006d0  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000233  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d0  00000000  00000000  000014a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001874  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000137  00000000  00000000  00001924  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000195  00000000  00000000  00001a5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e9       	ldi	r26, 0x98	; 152
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 39       	cpi	r26, 0x9B	; 155
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f5 00 	call	0x1ea	; 0x1ea <main>
  8a:	0c 94 09 01 	jmp	0x212	; 0x212 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <usart_init>:
	}
}

void usart_init()
{
	UCSRB=UCSRB|1<<RXEN|1<<TXEN;
  92:	8a b1       	in	r24, 0x0a	; 10
  94:	88 61       	ori	r24, 0x18	; 24
  96:	8a b9       	out	0x0a, r24	; 10
	UCSRC=UCSRC|1<<URSEL|1<<UCSZ0|1<<UCSZ1;
  98:	80 b5       	in	r24, 0x20	; 32
  9a:	86 68       	ori	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32
	UBRRL=0x33;
  9e:	83 e3       	ldi	r24, 0x33	; 51
  a0:	89 b9       	out	0x09, r24	; 9
}
  a2:	08 95       	ret

000000a4 <usart_string>:
		lcd_cmd(0x01);
	}
}

void usart_string(char *y)
{
  a4:	fc 01       	movw	r30, r24
	while(*y)
  a6:	80 81       	ld	r24, Z
  a8:	88 23       	and	r24, r24
  aa:	81 f0       	breq	.+32     	; 0xcc <usart_string+0x28>
		PORTA &= ~(1<<0);
		lcd_cmd(0x01);
	}
}

void usart_string(char *y)
  ac:	31 96       	adiw	r30, 0x01	; 1
{
	while(*y)
	{
		UDR=*y;
  ae:	8c b9       	out	0x0c, r24	; 12
		//tx(*y);
	while((UCSRA&(1<<UDRE))==0){}
  b0:	5d 9b       	sbis	0x0b, 5	; 11
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <usart_string+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	90 e7       	ldi	r25, 0x70	; 112
  b8:	a2 e0       	ldi	r26, 0x02	; 2
  ba:	81 50       	subi	r24, 0x01	; 1
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	a0 40       	sbci	r26, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <usart_string+0x16>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <usart_string+0x20>
  c4:	00 00       	nop
	}
}

void usart_string(char *y)
{
	while(*y)
  c6:	81 91       	ld	r24, Z+
  c8:	88 23       	and	r24, r24
  ca:	89 f7       	brne	.-30     	; 0xae <usart_string+0xa>
  cc:	08 95       	ret

000000ce <tx>:
}
}

void tx(char y)
{
	UDR = y ;
  ce:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA&(1<<UDRE)) == 0){}   // wait
  d0:	5d 9b       	sbis	0x0b, 5	; 11
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <tx+0x2>
	
}
  d4:	08 95       	ret

000000d6 <lcd_cmd>:
	lcd_cmd(0x06);
}

void lcd_cmd(char x)
{
	PORTB = x;
  d6:	88 bb       	out	0x18, r24	; 24
	PORTA=PORTA&~(1<<1);
  d8:	d9 98       	cbi	0x1b, 1	; 27
	PORTA=PORTA&~(1<<2);
  da:	da 98       	cbi	0x1b, 2	; 27
	PORTA=PORTA|(1<<3);
  dc:	db 9a       	sbi	0x1b, 3	; 27
  de:	8f ec       	ldi	r24, 0xCF	; 207
  e0:	97 e0       	ldi	r25, 0x07	; 7
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <lcd_cmd+0xc>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <lcd_cmd+0x12>
  e8:	00 00       	nop
	_delay_ms(1);
	PORTA=PORTA&~(1<<3);
  ea:	db 98       	cbi	0x1b, 3	; 27
  ec:	8f ec       	ldi	r24, 0xCF	; 207
  ee:	97 e0       	ldi	r25, 0x07	; 7
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_cmd+0x1a>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_cmd+0x20>
  f6:	00 00       	nop
	_delay_ms(1);	
}
  f8:	08 95       	ret

000000fa <lcd_init>:
	
}

void lcd_init()
{
	lcd_cmd(0x38);
  fa:	88 e3       	ldi	r24, 0x38	; 56
  fc:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_cmd>
	lcd_cmd(0x0e);
 100:	8e e0       	ldi	r24, 0x0E	; 14
 102:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_cmd>
	lcd_cmd(0x06);
 106:	86 e0       	ldi	r24, 0x06	; 6
 108:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_cmd>
}
 10c:	08 95       	ret

0000010e <lcd_data>:
	_delay_ms(1);	
}

void lcd_data(char x)
{
	PORTB = x;
 10e:	88 bb       	out	0x18, r24	; 24
	PORTA=PORTA|(1<<1);
 110:	d9 9a       	sbi	0x1b, 1	; 27
	PORTA=PORTA&~(1<<2);
 112:	da 98       	cbi	0x1b, 2	; 27
	PORTA=PORTA|(1<<3);
 114:	db 9a       	sbi	0x1b, 3	; 27
 116:	8f ec       	ldi	r24, 0xCF	; 207
 118:	97 e0       	ldi	r25, 0x07	; 7
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_data+0xc>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_data+0x12>
 120:	00 00       	nop
	_delay_ms(1);
	PORTA=PORTA&~(1<<3);
 122:	db 98       	cbi	0x1b, 3	; 27
 124:	8f ec       	ldi	r24, 0xCF	; 207
 126:	97 e0       	ldi	r25, 0x07	; 7
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_data+0x1a>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_data+0x20>
 12e:	00 00       	nop
	_delay_ms(1);
}
 130:	08 95       	ret

00000132 <lcd_string>:

void lcd_string(char *x)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	ec 01       	movw	r28, r24
	while(*x)
 138:	88 81       	ld	r24, Y
 13a:	88 23       	and	r24, r24
 13c:	79 f0       	breq	.+30     	; 0x15c <lcd_string+0x2a>
	_delay_ms(1);
	PORTA=PORTA&~(1<<3);
	_delay_ms(1);
}

void lcd_string(char *x)
 13e:	21 96       	adiw	r28, 0x01	; 1
{
	while(*x)
	{
		lcd_data(*x);
 140:	0e 94 87 00 	call	0x10e	; 0x10e <lcd_data>
 144:	8f e7       	ldi	r24, 0x7F	; 127
 146:	98 e3       	ldi	r25, 0x38	; 56
 148:	a1 e0       	ldi	r26, 0x01	; 1
 14a:	81 50       	subi	r24, 0x01	; 1
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	a0 40       	sbci	r26, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <lcd_string+0x18>
 152:	00 c0       	rjmp	.+0      	; 0x154 <lcd_string+0x22>
 154:	00 00       	nop
	_delay_ms(1);
}

void lcd_string(char *x)
{
	while(*x)
 156:	89 91       	ld	r24, Y+
 158:	88 23       	and	r24, r24
 15a:	91 f7       	brne	.-28     	; 0x140 <lcd_string+0xe>
	{
		lcd_data(*x);
		_delay_ms(50);
		x++;
	}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <rx>:

char rx()
{
//while((UCSRA&(1<<RXC))==0){}
	
	for( i=0; i<=11; i++)
 162:	10 92 99 00 	sts	0x0099, r1
 166:	10 92 98 00 	sts	0x0098, r1
 16a:	ea e9       	ldi	r30, 0x9A	; 154
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	90 e0       	ldi	r25, 0x00	; 0
	{
		while((UCSRA&(1<<RXC))==0){}
 172:	5f 9b       	sbis	0x0b, 7	; 11
 174:	fe cf       	rjmp	.-4      	; 0x172 <rx+0x10>
			arr2[i] = UDR ;
 176:	2c b1       	in	r18, 0x0c	; 12
 178:	21 93       	st	Z+, r18

char rx()
{
//while((UCSRA&(1<<RXC))==0){}
	
	for( i=0; i<=11; i++)
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	90 93 99 00 	sts	0x0099, r25
 180:	80 93 98 00 	sts	0x0098, r24
 184:	8c 30       	cpi	r24, 0x0C	; 12
 186:	91 05       	cpc	r25, r1
 188:	a1 f7       	brne	.-24     	; 0x172 <rx+0x10>
	{
		while((UCSRA&(1<<RXC))==0){}
			arr2[i] = UDR ;
	}arr2[i] = '\0'; 
 18a:	10 92 a6 00 	sts	0x00A6, r1


	if(strcmp(arr,arr2)==0)
 18e:	8b e8       	ldi	r24, 0x8B	; 139
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	6a e9       	ldi	r22, 0x9A	; 154
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	0e 94 00 01 	call	0x200	; 0x200 <strcmp>
 19a:	28 2f       	mov	r18, r24
 19c:	39 2f       	mov	r19, r25
 19e:	21 15       	cp	r18, r1
 1a0:	31 05       	cpc	r19, r1
 1a2:	f1 f4       	brne	.+60     	; 0x1e0 <rx+0x7e>
	{
		lcd_string("ALERT !!!");
 1a4:	80 e6       	ldi	r24, 0x60	; 96
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 99 00 	call	0x132	; 0x132 <lcd_string>
		lcd_cmd(0xc0);
 1ac:	80 ec       	ldi	r24, 0xC0	; 192
 1ae:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_cmd>
		lcd_string("EMERGENCY");
 1b2:	8a e6       	ldi	r24, 0x6A	; 106
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 99 00 	call	0x132	; 0x132 <lcd_string>
		lcd_cmd(0x80);
 1ba:	80 e8       	ldi	r24, 0x80	; 128
 1bc:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_cmd>
		usart_string("Lat:28.824, Lon:77.152");
 1c0:	84 e7       	ldi	r24, 0x74	; 116
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 52 00 	call	0xa4	; 0xa4 <usart_string>
				
		while(1)
		{
			PORTA |= 0x01;
 1c8:	d8 9a       	sbi	0x1b, 0	; 27
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	91 ee       	ldi	r25, 0xE1	; 225
 1ce:	a4 e0       	ldi	r26, 0x04	; 4
 1d0:	81 50       	subi	r24, 0x01	; 1
 1d2:	90 40       	sbci	r25, 0x00	; 0
 1d4:	a0 40       	sbci	r26, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <rx+0x6e>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <rx+0x78>
 1da:	00 00       	nop
			_delay_ms(200);
			PORTA &= ~(1<<0);
 1dc:	d8 98       	cbi	0x1b, 0	; 27
 1de:	f4 cf       	rjmp	.-24     	; 0x1c8 <rx+0x66>
		
		//_delay_ms(500);
	}
	else 
	{
		PORTA &= ~(1<<0);
 1e0:	d8 98       	cbi	0x1b, 0	; 27
		lcd_cmd(0x01);
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	0e 94 6b 00 	call	0xd6	; 0xd6 <lcd_cmd>
	}
}
 1e8:	08 95       	ret

000001ea <main>:

int i;

int main(void)
{
	DDRA = 0x0F;
 1ea:	8f e0       	ldi	r24, 0x0F	; 15
 1ec:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	87 bb       	out	0x17, r24	; 23
	//DDRD = 0x02;
	usart_init();
 1f2:	0e 94 49 00 	call	0x92	; 0x92 <usart_init>
	lcd_init();
 1f6:	0e 94 7d 00 	call	0xfa	; 0xfa <lcd_init>
	//lcd_string("hello");
	
	while(1)
	{
		rx() ;
 1fa:	0e 94 b1 00 	call	0x162	; 0x162 <rx>
 1fe:	fd cf       	rjmp	.-6      	; 0x1fa <main+0x10>

00000200 <strcmp>:
 200:	fb 01       	movw	r30, r22
 202:	dc 01       	movw	r26, r24
 204:	8d 91       	ld	r24, X+
 206:	01 90       	ld	r0, Z+
 208:	80 19       	sub	r24, r0
 20a:	01 10       	cpse	r0, r1
 20c:	d9 f3       	breq	.-10     	; 0x204 <strcmp+0x4>
 20e:	99 0b       	sbc	r25, r25
 210:	08 95       	ret

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
