
gsm__1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  000001d0  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000009c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005e5  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001cb  00000000  00000000  0000102d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000388  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001580  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000129  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000100  00000000  00000000  0000175d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e9       	ldi	r26, 0x90	; 144
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 39       	cpi	r26, 0x90	; 144
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
  8a:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <usart_init>:
#include <avr/io.h>
#include <util/delay.h>

void usart_init()
{
	UCSRB = UCSRB|1<<TXEN|1<<RXEN ;
  92:	8a b1       	in	r24, 0x0a	; 10
  94:	88 61       	ori	r24, 0x18	; 24
  96:	8a b9       	out	0x0a, r24	; 10
	UCSRC = UCSRC|1<<URSEL|1<<UCSZ0|1<<UCSZ1 ;
  98:	80 b5       	in	r24, 0x20	; 32
  9a:	86 68       	ori	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32
	UBRRL = 51 ;
  9e:	83 e3       	ldi	r24, 0x33	; 51
  a0:	89 b9       	out	0x09, r24	; 9
}
  a2:	08 95       	ret

000000a4 <tx_string>:

void tx_string(char *x)
{
  a4:	fc 01       	movw	r30, r24
	while(*x)
  a6:	80 81       	ld	r24, Z
  a8:	88 23       	and	r24, r24
  aa:	39 f0       	breq	.+14     	; 0xba <tx_string+0x16>
	UCSRB = UCSRB|1<<TXEN|1<<RXEN ;
	UCSRC = UCSRC|1<<URSEL|1<<UCSZ0|1<<UCSZ1 ;
	UBRRL = 51 ;
}

void tx_string(char *x)
  ac:	31 96       	adiw	r30, 0x01	; 1
{
	while(*x)
	{
		UDR=*x;
  ae:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA&(1<<UDRE))==0){}
  b0:	5d 9b       	sbis	0x0b, 5	; 11
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <tx_string+0xc>
	UBRRL = 51 ;
}

void tx_string(char *x)
{
	while(*x)
  b4:	81 91       	ld	r24, Z+
  b6:	88 23       	and	r24, r24
  b8:	d1 f7       	brne	.-12     	; 0xae <tx_string+0xa>
  ba:	08 95       	ret

000000bc <tx>:
	//_delay_ms(500);
}
}
void tx(char x)
{
	UDR = x ;
  bc:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA&(1<<UDRE)) == 0){}   // wait 
  be:	5d 9b       	sbis	0x0b, 5	; 11
  c0:	fe cf       	rjmp	.-4      	; 0xbe <tx+0x2>
	
}
  c2:	08 95       	ret

000000c4 <GSM_CALL>:

void GSM_CALL()
{
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	0f 92       	push	r0
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
	char ctrlz[]={26};
  ce:	8a e1       	ldi	r24, 0x1A	; 26
  d0:	89 83       	std	Y+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	94 e3       	ldi	r25, 0x34	; 52
  d6:	ac e0       	ldi	r26, 0x0C	; 12
  d8:	81 50       	subi	r24, 0x01	; 1
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	a0 40       	sbci	r26, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <GSM_CALL+0x14>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <GSM_CALL+0x1e>
  e2:	00 00       	nop
		_delay_ms(500);
	tx_string("ATD9990480092;\r");
  e4:	80 e6       	ldi	r24, 0x60	; 96
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 52 00 	call	0xa4	; 0xa4 <tx_string>
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	93 ed       	ldi	r25, 0xD3	; 211
  f0:	a0 e3       	ldi	r26, 0x30	; 48
  f2:	81 50       	subi	r24, 0x01	; 1
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	a0 40       	sbci	r26, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <GSM_CALL+0x2e>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <GSM_CALL+0x38>
  fc:	00 00       	nop
	_delay_ms(2000);
	tx_string(ctrlz);
  fe:	ce 01       	movw	r24, r28
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	0e 94 52 00 	call	0xa4	; 0xa4 <tx_string>
	
}
 106:	0f 90       	pop	r0
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <GSM_HANG>:
void GSM_HANG()
{
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	0f 92       	push	r0
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
	char ctrlz[]={26};
 118:	8a e1       	ldi	r24, 0x1A	; 26
 11a:	89 83       	std	Y+1, r24	; 0x01
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	94 e3       	ldi	r25, 0x34	; 52
 120:	ac e0       	ldi	r26, 0x0C	; 12
 122:	81 50       	subi	r24, 0x01	; 1
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	a0 40       	sbci	r26, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <GSM_HANG+0x14>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <GSM_HANG+0x1e>
 12c:	00 00       	nop
	_delay_ms(500);
	tx_string("ATH;\r");
 12e:	80 e7       	ldi	r24, 0x70	; 112
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 52 00 	call	0xa4	; 0xa4 <tx_string>
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	93 ed       	ldi	r25, 0xD3	; 211
 13a:	a0 e3       	ldi	r26, 0x30	; 48
 13c:	81 50       	subi	r24, 0x01	; 1
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	a0 40       	sbci	r26, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <GSM_HANG+0x2e>
 144:	00 c0       	rjmp	.+0      	; 0x146 <GSM_HANG+0x38>
 146:	00 00       	nop
	_delay_ms(2000);
	tx_string(ctrlz);
 148:	ce 01       	movw	r24, r28
 14a:	01 96       	adiw	r24, 0x01	; 1
 14c:	0e 94 52 00 	call	0xa4	; 0xa4 <tx_string>
}
 150:	0f 90       	pop	r0
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <msg>:
void msg()
{
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	0f 92       	push	r0
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
	
	char ctrlz[]={26};
 162:	8a e1       	ldi	r24, 0x1A	; 26
 164:	89 83       	std	Y+1, r24	; 0x01
	tx_string("AT+CMGF=1;/r");
 166:	86 e7       	ldi	r24, 0x76	; 118
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 52 00 	call	0xa4	; 0xa4 <tx_string>
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	94 e3       	ldi	r25, 0x34	; 52
 172:	ac e0       	ldi	r26, 0x0C	; 12
 174:	81 50       	subi	r24, 0x01	; 1
 176:	90 40       	sbci	r25, 0x00	; 0
 178:	a0 40       	sbci	r26, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <msg+0x1c>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <msg+0x26>
 17e:	00 00       	nop
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	93 ed       	ldi	r25, 0xD3	; 211
 184:	a0 e3       	ldi	r26, 0x30	; 48
 186:	81 50       	subi	r24, 0x01	; 1
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	a0 40       	sbci	r26, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <msg+0x2e>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <msg+0x38>
 190:	00 00       	nop
	_delay_ms(500);
	//tx_string("AT+CMGS="/9582369856;/"/r");
	_delay_ms(2000);
	tx_string("hello shriya");
 192:	83 e8       	ldi	r24, 0x83	; 131
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 52 00 	call	0xa4	; 0xa4 <tx_string>
	tx_string(ctrlz);
 19a:	ce 01       	movw	r24, r28
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	0e 94 52 00 	call	0xa4	; 0xa4 <tx_string>
}
 1a2:	0f 90       	pop	r0
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <main>:

int main(void)
{
	DDRA=0x00;
 1aa:	1a ba       	out	0x1a, r1	; 26
	usart_init() ;
 1ac:	0e 94 49 00 	call	0x92	; 0x92 <usart_init>
	
    while(1)
	{
       if(PINA&(1<<0))
 1b0:	c8 9b       	sbis	0x19, 0	; 25
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <main+0x14>
	   {
		   GSM_CALL();
 1b4:	0e 94 62 00 	call	0xc4	; 0xc4 <GSM_CALL>
		   while(PINA&(1<<0));
 1b8:	c8 99       	sbic	0x19, 0	; 25
 1ba:	fe cf       	rjmp	.-4      	; 0x1b8 <main+0xe>
 1bc:	f9 cf       	rjmp	.-14     	; 0x1b0 <main+0x6>
      }
	   else if (PINA&(1<<1))
 1be:	c9 9b       	sbis	0x19, 1	; 25
 1c0:	f7 cf       	rjmp	.-18     	; 0x1b0 <main+0x6>
	   {
		   GSM_HANG();
 1c2:	0e 94 87 00 	call	0x10e	; 0x10e <GSM_HANG>
		   while(PINA&(1<<1));
 1c6:	c9 99       	sbic	0x19, 1	; 25
 1c8:	fe cf       	rjmp	.-4      	; 0x1c6 <main+0x1c>
 1ca:	f2 cf       	rjmp	.-28     	; 0x1b0 <main+0x6>

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
