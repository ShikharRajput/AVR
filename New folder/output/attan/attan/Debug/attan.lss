
attan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000001c4  00000258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800084  00800084  0000027c  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000060d  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000020b  00000000  00000000  00001145  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039f  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  000016f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000139  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000dd  00000000  00000000  000018b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 38       	cpi	r26, 0x87	; 135
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  8a:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <usart_init>:
	}
}

void usart_init()
{
	UCSRB=UCSRB|1<<RXEN;
  92:	54 9a       	sbi	0x0a, 4	; 10
	UCSRC=UCSRC|1<<URSEL|1<<UCSZ0|1<<UCSZ1;
  94:	80 b5       	in	r24, 0x20	; 32
  96:	86 68       	ori	r24, 0x86	; 134
  98:	80 bd       	out	0x20, r24	; 32
	UBRRL=0x33;
  9a:	83 e3       	ldi	r24, 0x33	; 51
  9c:	89 b9       	out	0x09, r24	; 9
}
  9e:	08 95       	ret

000000a0 <lcd_cmd>:
	//lcd_cmd(0x80);
}

void lcd_cmd(char x)
{
	PORTB = x;
  a0:	88 bb       	out	0x18, r24	; 24
	PORTA=PORTA&~(1<<1);
  a2:	d9 98       	cbi	0x1b, 1	; 27
	PORTA=PORTA&~(1<<2);
  a4:	da 98       	cbi	0x1b, 2	; 27
	PORTA=PORTA|(1<<3);
  a6:	db 9a       	sbi	0x1b, 3	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	8f ec       	ldi	r24, 0xCF	; 207
  aa:	97 e0       	ldi	r25, 0x07	; 7
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <lcd_cmd+0xc>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <lcd_cmd+0x12>
  b2:	00 00       	nop
	_delay_ms(1);
	PORTA=PORTA&~(1<<3);
  b4:	db 98       	cbi	0x1b, 3	; 27
  b6:	8f ec       	ldi	r24, 0xCF	; 207
  b8:	97 e0       	ldi	r25, 0x07	; 7
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <lcd_cmd+0x1a>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <lcd_cmd+0x20>
  c0:	00 00       	nop
	_delay_ms(1);	
}
  c2:	08 95       	ret

000000c4 <lcd_init>:
	}
}

void lcd_init()
{
	lcd_cmd(0x38);
  c4:	88 e3       	ldi	r24, 0x38	; 56
  c6:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_cmd>
	lcd_cmd(0x0e);
  ca:	8e e0       	ldi	r24, 0x0E	; 14
  cc:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_cmd>
	lcd_cmd(0x06);
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_cmd>
	//lcd_cmd(0x80);
}
  d6:	08 95       	ret

000000d8 <lcd_data>:
	_delay_ms(1);	
}

void lcd_data(char x)
{
	PORTB = x;
  d8:	88 bb       	out	0x18, r24	; 24
	PORTA=PORTA|(1<<1);
  da:	d9 9a       	sbi	0x1b, 1	; 27
	PORTA=PORTA&~(1<<2);
  dc:	da 98       	cbi	0x1b, 2	; 27
	PORTA=PORTA|(1<<3);
  de:	db 9a       	sbi	0x1b, 3	; 27
  e0:	8f ec       	ldi	r24, 0xCF	; 207
  e2:	97 e0       	ldi	r25, 0x07	; 7
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <lcd_data+0xc>
  e8:	00 c0       	rjmp	.+0      	; 0xea <lcd_data+0x12>
  ea:	00 00       	nop
	_delay_ms(1);
	PORTA=PORTA&~(1<<3);
  ec:	db 98       	cbi	0x1b, 3	; 27
  ee:	8f ec       	ldi	r24, 0xCF	; 207
  f0:	97 e0       	ldi	r25, 0x07	; 7
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <lcd_data+0x1a>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <lcd_data+0x20>
  f8:	00 00       	nop
	_delay_ms(1);
}
  fa:	08 95       	ret

000000fc <lcd_string>:

void lcd_string(char *x)
{
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	ec 01       	movw	r28, r24
	while(*x)
 102:	88 81       	ld	r24, Y
 104:	88 23       	and	r24, r24
 106:	79 f0       	breq	.+30     	; 0x126 <lcd_string+0x2a>
	_delay_ms(1);
	PORTA=PORTA&~(1<<3);
	_delay_ms(1);
}

void lcd_string(char *x)
 108:	21 96       	adiw	r28, 0x01	; 1
{
	while(*x)
	{
		lcd_data(*x);
 10a:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_data>
 10e:	8f e7       	ldi	r24, 0x7F	; 127
 110:	98 e3       	ldi	r25, 0x38	; 56
 112:	a1 e0       	ldi	r26, 0x01	; 1
 114:	81 50       	subi	r24, 0x01	; 1
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	a0 40       	sbci	r26, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <lcd_string+0x18>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_string+0x22>
 11e:	00 00       	nop
	_delay_ms(1);
}

void lcd_string(char *x)
{
	while(*x)
 120:	89 91       	ld	r24, Y+
 122:	88 23       	and	r24, r24
 124:	91 f7       	brne	.-28     	; 0x10a <lcd_string+0xe>
	{
		lcd_data(*x);
		_delay_ms(50);
		x++;
	}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <rx>:

char rx()
{
//while((UCSRA&(1<<RXC))==0){}
	
	for( i=0; i<=11; i++)
 12c:	10 92 85 00 	sts	0x0085, r1
 130:	10 92 84 00 	sts	0x0084, r1
 134:	e6 e8       	ldi	r30, 0x86	; 134
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
	{
		while((UCSRA&(1<<RXC))==0){}
 13c:	5f 9b       	sbis	0x0b, 7	; 11
 13e:	fe cf       	rjmp	.-4      	; 0x13c <rx+0x10>
			arr2[i] = UDR ;
 140:	2c b1       	in	r18, 0x0c	; 12
 142:	21 93       	st	Z+, r18

char rx()
{
//while((UCSRA&(1<<RXC))==0){}
	
	for( i=0; i<=11; i++)
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	90 93 85 00 	sts	0x0085, r25
 14a:	80 93 84 00 	sts	0x0084, r24
 14e:	8c 30       	cpi	r24, 0x0C	; 12
 150:	91 05       	cpc	r25, r1
 152:	a1 f7       	brne	.-24     	; 0x13c <rx+0x10>
	{
		while((UCSRA&(1<<RXC))==0){}
			arr2[i] = UDR ;
	}arr2[i] = '\0'; 
 154:	10 92 92 00 	sts	0x0092, r1


	if(strcmp(arr,arr2)==0)
 158:	86 e7       	ldi	r24, 0x76	; 118
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	66 e8       	ldi	r22, 0x86	; 134
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	0e 94 d7 00 	call	0x1ae	; 0x1ae <strcmp>
 164:	28 2f       	mov	r18, r24
 166:	39 2f       	mov	r19, r25
 168:	21 15       	cp	r18, r1
 16a:	31 05       	cpc	r19, r1
 16c:	81 f4       	brne	.+32     	; 0x18e <rx+0x62>
	{
	
		PORTA |= 0x01;
 16e:	d8 9a       	sbi	0x1b, 0	; 27
		lcd_string("WELCOME");
 170:	80 e6       	ldi	r24, 0x60	; 96
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_string>
		lcd_cmd(0xc0);
 178:	80 ec       	ldi	r24, 0xC0	; 192
 17a:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_cmd>
		lcd_string("SHIKHAR SINGH");
 17e:	88 e6       	ldi	r24, 0x68	; 104
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_string>
		lcd_cmd(0x80);
 186:	80 e8       	ldi	r24, 0x80	; 128
 188:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_cmd>
 18c:	08 95       	ret
	}
	else 
	{
		PORTA &= ~(1<<0);
 18e:	d8 98       	cbi	0x1b, 0	; 27
		lcd_cmd(0x01);
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	0e 94 50 00 	call	0xa0	; 0xa0 <lcd_cmd>
	}
}
 196:	08 95       	ret

00000198 <main>:

int i;

int main(void)
{
	DDRA = 0x0F;
 198:	8f e0       	ldi	r24, 0x0F	; 15
 19a:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	87 bb       	out	0x17, r24	; 23
	
	usart_init();
 1a0:	0e 94 49 00 	call	0x92	; 0x92 <usart_init>
	lcd_init();
 1a4:	0e 94 62 00 	call	0xc4	; 0xc4 <lcd_init>
	//lcd_string("hello");
	
	while(1)
	{
		rx() ;
 1a8:	0e 94 96 00 	call	0x12c	; 0x12c <rx>
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <main+0x10>

000001ae <strcmp>:
 1ae:	fb 01       	movw	r30, r22
 1b0:	dc 01       	movw	r26, r24
 1b2:	8d 91       	ld	r24, X+
 1b4:	01 90       	ld	r0, Z+
 1b6:	80 19       	sub	r24, r0
 1b8:	01 10       	cpse	r0, r1
 1ba:	d9 f3       	breq	.-10     	; 0x1b2 <strcmp+0x4>
 1bc:	99 0b       	sbc	r25, r25
 1be:	08 95       	ret

000001c0 <_exit>:
 1c0:	f8 94       	cli

000001c2 <__stop_program>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <__stop_program>
