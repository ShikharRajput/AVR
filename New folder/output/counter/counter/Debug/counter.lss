
counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001dc  00000270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000270  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  000009c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000759  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001d7  00000000  00000000  000011e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004db  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00001894  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000013d  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000167  00000000  00000000  00001a8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ed       	ldi	r30, 0xDC	; 220
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  8a:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <counter_init>:
    }
}

void counter_init()
{
	TCCR0 = 0x06;
  92:	86 e0       	ldi	r24, 0x06	; 6
  94:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;
  96:	12 be       	out	0x32, r1	; 50
}
  98:	08 95       	ret

0000009a <lcd_cmd>:
	}
}

void lcd_cmd(char x)
{
	PORTD=x;
  9a:	82 bb       	out	0x12, r24	; 18
	PORTA=PORTA&~(1<<rs);
  9c:	d8 98       	cbi	0x1b, 0	; 27
	PORTA=PORTA&~(1<<rw);
  9e:	d9 98       	cbi	0x1b, 1	; 27
	PORTA=PORTA|(1<<en);
  a0:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	8f ec       	ldi	r24, 0xCF	; 207
  a4:	97 e0       	ldi	r25, 0x07	; 7
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <lcd_cmd+0xc>
  aa:	00 c0       	rjmp	.+0      	; 0xac <lcd_cmd+0x12>
  ac:	00 00       	nop
	_delay_ms(1);
	PORTA=PORTA&~(1<<en);
  ae:	da 98       	cbi	0x1b, 2	; 27
  b0:	8f ec       	ldi	r24, 0xCF	; 207
  b2:	97 e0       	ldi	r25, 0x07	; 7
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_cmd+0x1a>
  b8:	00 c0       	rjmp	.+0      	; 0xba <lcd_cmd+0x20>
  ba:	00 00       	nop
	_delay_ms(1);
	
}
  bc:	08 95       	ret

000000be <lcd_init>:



void lcd_init()
{
	lcd_cmd(0x38);
  be:	88 e3       	ldi	r24, 0x38	; 56
  c0:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_cmd>
	lcd_cmd(0x0e);
  c4:	8e e0       	ldi	r24, 0x0E	; 14
  c6:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_cmd>
	lcd_cmd(0x06);
  ca:	86 e0       	ldi	r24, 0x06	; 6
  cc:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_cmd>
	
}
  d0:	08 95       	ret

000000d2 <lcd_data>:

void lcd_data(char x)
{
	PORTD=x;
  d2:	82 bb       	out	0x12, r24	; 18
	PORTA=PORTA|1<<rs;
  d4:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA=PORTA&~(1<<rw);
  d6:	d9 98       	cbi	0x1b, 1	; 27
	PORTA=PORTA|1<<en;
  d8:	da 9a       	sbi	0x1b, 2	; 27
  da:	8f ec       	ldi	r24, 0xCF	; 207
  dc:	97 e0       	ldi	r25, 0x07	; 7
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcd_data+0xc>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_data+0x12>
  e4:	00 00       	nop
	_delay_ms(1);
	PORTA=PORTA&~(1<<en);
  e6:	da 98       	cbi	0x1b, 2	; 27
  e8:	8f ec       	ldi	r24, 0xCF	; 207
  ea:	97 e0       	ldi	r25, 0x07	; 7
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <lcd_data+0x1a>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <lcd_data+0x20>
  f2:	00 00       	nop

	_delay_ms(1);
}
  f4:	08 95       	ret

000000f6 <lcd_string>:
	_delay_ms(1);
	
}

void lcd_string(char *x)
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	ec 01       	movw	r28, r24
	while(*x !='\0')
  fc:	88 81       	ld	r24, Y
  fe:	88 23       	and	r24, r24
 100:	31 f0       	breq	.+12     	; 0x10e <lcd_string+0x18>
	PORTA=PORTA&~(1<<en);
	_delay_ms(1);
	
}

void lcd_string(char *x)
 102:	21 96       	adiw	r28, 0x01	; 1
{
	while(*x !='\0')
	{
		lcd_data(*x);
 104:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_data>
	
}

void lcd_string(char *x)
{
	while(*x !='\0')
 108:	89 91       	ld	r24, Y+
 10a:	88 23       	and	r24, r24
 10c:	d9 f7       	brne	.-10     	; 0x104 <lcd_string+0xe>
	{
		lcd_data(*x);
		x++;
	}
}
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <ascii>:
		ascii(x);
	}while((TIFR&(1<<TOV0)) == 0);
}

void ascii(int a)
{
 114:	ef 92       	push	r14
 116:	ff 92       	push	r15
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	18 2f       	mov	r17, r24
 120:	d9 2f       	mov	r29, r25
	char pos = 0x83;
 122:	c3 e8       	ldi	r28, 0x83	; 131
	int b;
	for(int i=0; i<3; i++)
	{
		lcd_cmd(pos);
		b = a%10;
 124:	0f 2e       	mov	r0, r31
 126:	fa e0       	ldi	r31, 0x0A	; 10
 128:	ef 2e       	mov	r14, r31
 12a:	ff 24       	eor	r15, r15
 12c:	f0 2d       	mov	r31, r0
{
	char pos = 0x83;
	int b;
	for(int i=0; i<3; i++)
	{
		lcd_cmd(pos);
 12e:	8c 2f       	mov	r24, r28
 130:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_cmd>
		b = a%10;
 134:	81 2f       	mov	r24, r17
 136:	9d 2f       	mov	r25, r29
 138:	b7 01       	movw	r22, r14
 13a:	0e 94 c5 00 	call	0x18a	; 0x18a <__divmodhi4>
		a = a/10;
 13e:	16 2f       	mov	r17, r22
 140:	d7 2f       	mov	r29, r23
		lcd_data(b+48);
 142:	80 5d       	subi	r24, 0xD0	; 208
 144:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_data>
		pos-- ;
 148:	c1 50       	subi	r28, 0x01	; 1

void ascii(int a)
{
	char pos = 0x83;
	int b;
	for(int i=0; i<3; i++)
 14a:	c0 38       	cpi	r28, 0x80	; 128
 14c:	81 f7       	brne	.-32     	; 0x12e <ascii+0x1a>
		b = a%10;
		a = a/10;
		lcd_data(b+48);
		pos-- ;
	}
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	ff 90       	pop	r15
 156:	ef 90       	pop	r14
 158:	08 95       	ret

0000015a <count>:
}

void count()
{
	do{
		x = TCNT0;
 15a:	82 b7       	in	r24, 0x32	; 50
 15c:	80 93 60 00 	sts	0x0060, r24
 160:	10 92 61 00 	sts	0x0061, r1
		ascii(x);
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 8a 00 	call	0x114	; 0x114 <ascii>
	}while((TIFR&(1<<TOV0)) == 0);
 16a:	08 b6       	in	r0, 0x38	; 56
 16c:	00 fe       	sbrs	r0, 0
 16e:	f5 cf       	rjmp	.-22     	; 0x15a <count>
}
 170:	08 95       	ret

00000172 <main>:
void ascii(int);

int x;
int main(void)
{
	DDRA = 0x07;
 172:	87 e0       	ldi	r24, 0x07	; 7
 174:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xff;
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xff;
 17a:	81 bb       	out	0x11, r24	; 17
	counter_init();
 17c:	0e 94 49 00 	call	0x92	; 0x92 <counter_init>
	lcd_init();
 180:	0e 94 5f 00 	call	0xbe	; 0xbe <lcd_init>
    while(1)
    {
		count();
 184:	0e 94 ad 00 	call	0x15a	; 0x15a <count>
 188:	fd cf       	rjmp	.-6      	; 0x184 <main+0x12>

0000018a <__divmodhi4>:
 18a:	97 fb       	bst	r25, 7
 18c:	09 2e       	mov	r0, r25
 18e:	07 26       	eor	r0, r23
 190:	0a d0       	rcall	.+20     	; 0x1a6 <__divmodhi4_neg1>
 192:	77 fd       	sbrc	r23, 7
 194:	04 d0       	rcall	.+8      	; 0x19e <__divmodhi4_neg2>
 196:	0c d0       	rcall	.+24     	; 0x1b0 <__udivmodhi4>
 198:	06 d0       	rcall	.+12     	; 0x1a6 <__divmodhi4_neg1>
 19a:	00 20       	and	r0, r0
 19c:	1a f4       	brpl	.+6      	; 0x1a4 <__divmodhi4_exit>

0000019e <__divmodhi4_neg2>:
 19e:	70 95       	com	r23
 1a0:	61 95       	neg	r22
 1a2:	7f 4f       	sbci	r23, 0xFF	; 255

000001a4 <__divmodhi4_exit>:
 1a4:	08 95       	ret

000001a6 <__divmodhi4_neg1>:
 1a6:	f6 f7       	brtc	.-4      	; 0x1a4 <__divmodhi4_exit>
 1a8:	90 95       	com	r25
 1aa:	81 95       	neg	r24
 1ac:	9f 4f       	sbci	r25, 0xFF	; 255
 1ae:	08 95       	ret

000001b0 <__udivmodhi4>:
 1b0:	aa 1b       	sub	r26, r26
 1b2:	bb 1b       	sub	r27, r27
 1b4:	51 e1       	ldi	r21, 0x11	; 17
 1b6:	07 c0       	rjmp	.+14     	; 0x1c6 <__udivmodhi4_ep>

000001b8 <__udivmodhi4_loop>:
 1b8:	aa 1f       	adc	r26, r26
 1ba:	bb 1f       	adc	r27, r27
 1bc:	a6 17       	cp	r26, r22
 1be:	b7 07       	cpc	r27, r23
 1c0:	10 f0       	brcs	.+4      	; 0x1c6 <__udivmodhi4_ep>
 1c2:	a6 1b       	sub	r26, r22
 1c4:	b7 0b       	sbc	r27, r23

000001c6 <__udivmodhi4_ep>:
 1c6:	88 1f       	adc	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	5a 95       	dec	r21
 1cc:	a9 f7       	brne	.-22     	; 0x1b8 <__udivmodhi4_loop>
 1ce:	80 95       	com	r24
 1d0:	90 95       	com	r25
 1d2:	bc 01       	movw	r22, r24
 1d4:	cd 01       	movw	r24, r26
 1d6:	08 95       	ret

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
