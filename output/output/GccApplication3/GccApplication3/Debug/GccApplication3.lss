
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000e8  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000041a  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000014a  00000000  00000000  00000d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000343  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000010c  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000038  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>
unsigned char arr[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x67};

void main(void)
{   
	DDRA = 0xff;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xff;
  96:	87 bb       	out	0x17, r24	; 23
	//int n = sizeof(arr);
	
    while(1)
    {
		for(int i =0; i<=9; i++)
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	30 e0       	ldi	r19, 0x00	; 0
		{
				PORTA = arr[i];
  9c:	00 e6       	ldi	r16, 0x60	; 96
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	c0 2f       	mov	r28, r16
  a2:	b1 2f       	mov	r27, r17

#include <avr/io.h>
#include <util/delay.h>
unsigned char arr[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x67};

void main(void)
  a4:	c8 01       	movw	r24, r16
  a6:	0a 96       	adiw	r24, 0x0a	; 10
	DDRB = 0xff;
	//int n = sizeof(arr);
	
    while(1)
    {
		for(int i =0; i<=9; i++)
  a8:	ee 24       	eor	r14, r14
  aa:	ff 24       	eor	r15, r15
		{
				PORTA = arr[i];
  ac:	f8 01       	movw	r30, r16
  ae:	e2 0f       	add	r30, r18
  b0:	f3 1f       	adc	r31, r19
  b2:	e0 81       	ld	r30, Z
  b4:	eb bb       	out	0x1b, r30	; 27
  b6:	ec 2f       	mov	r30, r28
  b8:	fb 2f       	mov	r31, r27
			for(int j=0; j<=9; j++)
			{
				PORTB = arr[j];
  ba:	a1 91       	ld	r26, Z+
  bc:	a8 bb       	out	0x18, r26	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	4f e3       	ldi	r20, 0x3F	; 63
  c0:	5d e0       	ldi	r21, 0x0D	; 13
  c2:	63 e0       	ldi	r22, 0x03	; 3
  c4:	41 50       	subi	r20, 0x01	; 1
  c6:	50 40       	sbci	r21, 0x00	; 0
  c8:	60 40       	sbci	r22, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x32>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x3c>
  ce:	00 00       	nop
    while(1)
    {
		for(int i =0; i<=9; i++)
		{
				PORTA = arr[i];
			for(int j=0; j<=9; j++)
  d0:	e8 17       	cp	r30, r24
  d2:	f9 07       	cpc	r31, r25
  d4:	91 f7       	brne	.-28     	; 0xba <main+0x28>
	DDRB = 0xff;
	//int n = sizeof(arr);
	
    while(1)
    {
		for(int i =0; i<=9; i++)
  d6:	2f 5f       	subi	r18, 0xFF	; 255
  d8:	3f 4f       	sbci	r19, 0xFF	; 255
  da:	2a 30       	cpi	r18, 0x0A	; 10
  dc:	31 05       	cpc	r19, r1
  de:	34 f3       	brlt	.-52     	; 0xac <main+0x1a>
  e0:	97 01       	movw	r18, r14
  e2:	e4 cf       	rjmp	.-56     	; 0xac <main+0x1a>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
