
lcd_and_adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000020a  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  0000029e  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  000009f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007bb  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000236  00000000  00000000  00001273  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004de  00000000  00000000  000014a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00001988  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000014a  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012e  00000000  00000000  00001b86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b6 00 	call	0x16c	; 0x16c <main>
  8a:	0c 94 03 01 	jmp	0x206	; 0x206 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_cmd_enable>:
}

	
void lcd_cmd_enable(char x)                  //to activate command register i.e to use data pins(7-14) as command pins
{
	PORTB  = x;
  92:	88 bb       	out	0x18, r24	; 24
	PORTD = PORTD &~ (1<<0);
  94:	90 98       	cbi	0x12, 0	; 18
	PORTD = PORTD &~ (1<<1);
  96:	91 98       	cbi	0x12, 1	; 18
	PORTD = PORTD | 1<<2;
  98:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	8f ec       	ldi	r24, 0xCF	; 207
  9c:	97 e0       	ldi	r25, 0x07	; 7
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_cmd_enable+0xc>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <lcd_cmd_enable+0x12>
  a4:	00 00       	nop
	_delay_ms(1);
	PORTD = PORTD &~ (1<<2);
  a6:	92 98       	cbi	0x12, 2	; 18
  a8:	8f ec       	ldi	r24, 0xCF	; 207
  aa:	97 e0       	ldi	r25, 0x07	; 7
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <lcd_cmd_enable+0x1a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <lcd_cmd_enable+0x20>
  b2:	00 00       	nop
	_delay_ms(1);

}
  b4:	08 95       	ret

000000b6 <lcd_data_enable>:
void lcd_data_enable(char y)                 //to activate data register
{
	PORTB = y;
  b6:	88 bb       	out	0x18, r24	; 24
	PORTD = PORTD | (1<<0);
  b8:	90 9a       	sbi	0x12, 0	; 18
	PORTD = PORTD &~ (1<<1);
  ba:	91 98       	cbi	0x12, 1	; 18
	PORTD = PORTD | 1<<2;
  bc:	92 9a       	sbi	0x12, 2	; 18
  be:	8f ec       	ldi	r24, 0xCF	; 207
  c0:	97 e0       	ldi	r25, 0x07	; 7
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_data_enable+0xc>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_data_enable+0x12>
  c8:	00 00       	nop
	_delay_ms(1);
	PORTD = PORTD &~ (1<<2);
  ca:	92 98       	cbi	0x12, 2	; 18
  cc:	8f ec       	ldi	r24, 0xCF	; 207
  ce:	97 e0       	ldi	r25, 0x07	; 7
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_data_enable+0x1a>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <lcd_data_enable+0x20>
  d6:	00 00       	nop
	_delay_ms(1);
	
}
  d8:	08 95       	ret

000000da <voltage>:
int voltage(int a)
{
	
	int v;
	
	v= ((5*a)/1023);
  da:	9c 01       	movw	r18, r24
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	82 0f       	add	r24, r18
  e6:	93 1f       	adc	r25, r19
  e8:	6f ef       	ldi	r22, 0xFF	; 255
  ea:	73 e0       	ldi	r23, 0x03	; 3
  ec:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <__divmodhi4>
  f0:	86 2f       	mov	r24, r22
  f2:	97 2f       	mov	r25, r23
	return v;
		             
		
}
  f4:	08 95       	ret

000000f6 <ascii_conversion>:

void ascii_conversion(int a,char pos)
{
  f6:	ef 92       	push	r14
  f8:	ff 92       	push	r15
  fa:	0f 93       	push	r16
  fc:	1f 93       	push	r17
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	8c 01       	movw	r16, r24
 104:	c6 2f       	mov	r28, r22
	return v;
		             
		
}

void ascii_conversion(int a,char pos)
 106:	d6 2f       	mov	r29, r22
 108:	d4 50       	subi	r29, 0x04	; 4
	
	int i, a1;
	for (i=0; i<4; i++)
	{
		lcd_cmd_enable(pos);
		a1= a%10;
 10a:	0f 2e       	mov	r0, r31
 10c:	fa e0       	ldi	r31, 0x0A	; 10
 10e:	ef 2e       	mov	r14, r31
 110:	ff 24       	eor	r15, r15
 112:	f0 2d       	mov	r31, r0
{
	
	int i, a1;
	for (i=0; i<4; i++)
	{
		lcd_cmd_enable(pos);
 114:	8c 2f       	mov	r24, r28
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
		a1= a%10;
		a = a/10;
 11c:	c8 01       	movw	r24, r16
 11e:	b7 01       	movw	r22, r14
 120:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <__divmodhi4>
 124:	8b 01       	movw	r16, r22
		lcd_data_enable(a1+48);                //asci value of zero is 48
 126:	c0 96       	adiw	r24, 0x30	; 48
 128:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_data_enable>
		pos--;
 12c:	c1 50       	subi	r28, 0x01	; 1

void ascii_conversion(int a,char pos)
{
	
	int i, a1;
	for (i=0; i<4; i++)
 12e:	cd 17       	cp	r28, r29
 130:	89 f7       	brne	.-30     	; 0x114 <ascii_conversion+0x1e>
		a = a/10;
		lcd_data_enable(a1+48);                //asci value of zero is 48
		pos--;
		
	}
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	ff 90       	pop	r15
 13c:	ef 90       	pop	r14
 13e:	08 95       	ret

00000140 <adc_init>:
}

void adc_init()
{
	
	ADMUX = 0x40;
 140:	80 e4       	ldi	r24, 0x40	; 64
 142:	87 b9       	out	0x07, r24	; 7
	ADCSRA = ADCSRA | 1<< ADEN | 1<< ADATE | 1<< ADPS0 | 1<<ADPS1 | 1<< ADPS2;
 144:	86 b1       	in	r24, 0x06	; 6
 146:	87 6a       	ori	r24, 0xA7	; 167
 148:	86 b9       	out	0x06, r24	; 6
	
}
 14a:	08 95       	ret

0000014c <conversion>:

int conversion()
{   int k;
	ADCSRA = ADCSRA | 1<<ADSC ;
 14c:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA&(1<<ADIF))==0){}
 14e:	34 9b       	sbis	0x06, 4	; 6
 150:	fe cf       	rjmp	.-4      	; 0x14e <conversion+0x2>
	k = ADC;
 152:	84 b1       	in	r24, 0x04	; 4
 154:	95 b1       	in	r25, 0x05	; 5
	return k;
      
//PORTD = (ADCH&(1<<0)&(1<<1));
}
 156:	08 95       	ret

00000158 <lcd_init>:

void lcd_init()
{
	lcd_cmd_enable(0x38);                   /* Initialization of 16X2 LCD in 8bit mode */
 158:	88 e3       	ldi	r24, 0x38	; 56
 15a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
	
	lcd_cmd_enable(0x0e);                    /* Display ON Cursor OFF */
 15e:	8e e0       	ldi	r24, 0x0E	; 14
 160:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>

	lcd_cmd_enable(0x06);                     /* Auto Increment cursor */
 164:	86 e0       	ldi	r24, 0x06	; 6
 166:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
	
}
 16a:	08 95       	ret

0000016c <main>:



int main(void)
{
	DDRA = 0x00;
 16c:	1a ba       	out	0x1a, r1	; 26
	DDRD = 0x07;
 16e:	87 e0       	ldi	r24, 0x07	; 7
 170:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xff;
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	87 bb       	out	0x17, r24	; 23
	
	lcd_init();
 176:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_init>
	adc_init();
 17a:	0e 94 a0 00 	call	0x140	; 0x140 <adc_init>
	lcd_cmd_enable(0x10);                         /* clear display */
 17e:	80 e1       	ldi	r24, 0x10	; 16
 180:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
	
	lcd_cmd_enable(0x80);                          /* cursor at home position */
 184:	80 e8       	ldi	r24, 0x80	; 128
 186:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
	
	
	while(1)
	{
		y= conversion();
 18a:	0e 94 a6 00 	call	0x14c	; 0x14c <conversion>
 18e:	90 93 63 00 	sts	0x0063, r25
 192:	80 93 62 00 	sts	0x0062, r24
		ascii_conversion(y,0x83);
 196:	63 e8       	ldi	r22, 0x83	; 131
 198:	0e 94 7b 00 	call	0xf6	; 0xf6 <ascii_conversion>
		z = voltage(y);
 19c:	80 91 62 00 	lds	r24, 0x0062
 1a0:	90 91 63 00 	lds	r25, 0x0063
 1a4:	0e 94 6d 00 	call	0xda	; 0xda <voltage>
 1a8:	90 93 61 00 	sts	0x0061, r25
 1ac:	80 93 60 00 	sts	0x0060, r24
		ascii_conversion(z,0xc3);
 1b0:	63 ec       	ldi	r22, 0xC3	; 195
 1b2:	0e 94 7b 00 	call	0xf6	; 0xf6 <ascii_conversion>
 1b6:	e9 cf       	rjmp	.-46     	; 0x18a <main+0x1e>

000001b8 <__divmodhi4>:
 1b8:	97 fb       	bst	r25, 7
 1ba:	09 2e       	mov	r0, r25
 1bc:	07 26       	eor	r0, r23
 1be:	0a d0       	rcall	.+20     	; 0x1d4 <__divmodhi4_neg1>
 1c0:	77 fd       	sbrc	r23, 7
 1c2:	04 d0       	rcall	.+8      	; 0x1cc <__divmodhi4_neg2>
 1c4:	0c d0       	rcall	.+24     	; 0x1de <__udivmodhi4>
 1c6:	06 d0       	rcall	.+12     	; 0x1d4 <__divmodhi4_neg1>
 1c8:	00 20       	and	r0, r0
 1ca:	1a f4       	brpl	.+6      	; 0x1d2 <__divmodhi4_exit>

000001cc <__divmodhi4_neg2>:
 1cc:	70 95       	com	r23
 1ce:	61 95       	neg	r22
 1d0:	7f 4f       	sbci	r23, 0xFF	; 255

000001d2 <__divmodhi4_exit>:
 1d2:	08 95       	ret

000001d4 <__divmodhi4_neg1>:
 1d4:	f6 f7       	brtc	.-4      	; 0x1d2 <__divmodhi4_exit>
 1d6:	90 95       	com	r25
 1d8:	81 95       	neg	r24
 1da:	9f 4f       	sbci	r25, 0xFF	; 255
 1dc:	08 95       	ret

000001de <__udivmodhi4>:
 1de:	aa 1b       	sub	r26, r26
 1e0:	bb 1b       	sub	r27, r27
 1e2:	51 e1       	ldi	r21, 0x11	; 17
 1e4:	07 c0       	rjmp	.+14     	; 0x1f4 <__udivmodhi4_ep>

000001e6 <__udivmodhi4_loop>:
 1e6:	aa 1f       	adc	r26, r26
 1e8:	bb 1f       	adc	r27, r27
 1ea:	a6 17       	cp	r26, r22
 1ec:	b7 07       	cpc	r27, r23
 1ee:	10 f0       	brcs	.+4      	; 0x1f4 <__udivmodhi4_ep>
 1f0:	a6 1b       	sub	r26, r22
 1f2:	b7 0b       	sbc	r27, r23

000001f4 <__udivmodhi4_ep>:
 1f4:	88 1f       	adc	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	5a 95       	dec	r21
 1fa:	a9 f7       	brne	.-22     	; 0x1e6 <__udivmodhi4_loop>
 1fc:	80 95       	com	r24
 1fe:	90 95       	com	r25
 200:	bc 01       	movw	r22, r24
 202:	cd 01       	movw	r24, r26
 204:	08 95       	ret

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
