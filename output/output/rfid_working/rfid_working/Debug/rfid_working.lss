
rfid_working.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000112  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000112  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006e  0080006e  000001b4  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  000009f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003cb  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000010d  00000000  00000000  00000e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000029d  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000011e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000b7  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 76 00 	call	0xec	; 0xec <main>
  8a:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <usart_init>:
	
int i;

void usart_init()
{
	UCSRB = UCSRB |1<<RXEN;
  92:	54 9a       	sbi	0x0a, 4	; 10
	UCSRC = UCSRC | 1<<URSEL | 1<< UCSZ0 | 1<< UCSZ1;
  94:	80 b5       	in	r24, 0x20	; 32
  96:	86 68       	ori	r24, 0x86	; 134
  98:	80 bd       	out	0x20, r24	; 32
	UBRRL = 0x33;
  9a:	83 e3       	ldi	r24, 0x33	; 51
  9c:	89 b9       	out	0x09, r24	; 9
	
	
}
  9e:	08 95       	ret

000000a0 <Rx>:

char Rx()
{

	for( i =0; i<12 ; i++)
  a0:	10 92 6f 00 	sts	0x006F, r1
  a4:	10 92 6e 00 	sts	0x006E, r1
  a8:	e0 e7       	ldi	r30, 0x70	; 112
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
		{	
			
			while((UCSRA&(1<< RXC))==0){}
  b0:	5f 9b       	sbis	0x0b, 7	; 11
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <Rx+0x10>
			a[i] = UDR;
  b4:	2c b1       	in	r18, 0x0c	; 12
  b6:	21 93       	st	Z+, r18
}

char Rx()
{

	for( i =0; i<12 ; i++)
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	90 93 6f 00 	sts	0x006F, r25
  be:	80 93 6e 00 	sts	0x006E, r24
  c2:	8c 30       	cpi	r24, 0x0C	; 12
  c4:	91 05       	cpc	r25, r1
  c6:	a1 f7       	brne	.-24     	; 0xb0 <Rx+0x10>
			
			while((UCSRA&(1<< RXC))==0){}
			a[i] = UDR;
			
		}
	a[i]='\0';
  c8:	10 92 7c 00 	sts	0x007C, r1
	if(strcmp(card,a)==0)
  cc:	80 e6       	ldi	r24, 0x60	; 96
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	60 e7       	ldi	r22, 0x70	; 112
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	0e 94 7e 00 	call	0xfc	; 0xfc <strcmp>
  d8:	28 2f       	mov	r18, r24
  da:	39 2f       	mov	r19, r25
  dc:	21 15       	cp	r18, r1
  de:	31 05       	cpc	r19, r1
  e0:	19 f4       	brne	.+6      	; 0xe8 <Rx+0x48>
	{
		PORTA=0x01;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	8b bb       	out	0x1b, r24	; 27
  e6:	08 95       	ret
	}
	
	else
	{
		PORTA = 0x00;
  e8:	1b ba       	out	0x1b, r1	; 27
	}
		}	
  ea:	08 95       	ret

000000ec <main>:
}*/


int main(void)
{ 
	DDRA = 0x01;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0x00;
  f0:	11 ba       	out	0x11, r1	; 17
	usart_init();
  f2:	0e 94 49 00 	call	0x92	; 0x92 <usart_init>
    while(1)
    {
		Rx();
  f6:	0e 94 50 00 	call	0xa0	; 0xa0 <Rx>
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <main+0xa>

000000fc <strcmp>:
  fc:	fb 01       	movw	r30, r22
  fe:	dc 01       	movw	r26, r24
 100:	8d 91       	ld	r24, X+
 102:	01 90       	ld	r0, Z+
 104:	80 19       	sub	r24, r0
 106:	01 10       	cpse	r0, r1
 108:	d9 f3       	breq	.-10     	; 0x100 <strcmp+0x4>
 10a:	99 0b       	sbc	r25, r25
 10c:	08 95       	ret

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
