
lcd(string_r_l_without_clear).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000016e  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000948  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000595  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000019d  00000000  00000000  00000f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a3  00000000  00000000  000010fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000014a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000169  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000101  00000000  00000000  00001679  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  8a:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_cmd_enable>:
}


void lcd_cmd_enable(char x)                  //to activate command register i.e to use data pins(7-14) as command pins
{
	PORTB  = x;
  92:	88 bb       	out	0x18, r24	; 24
	PORTA = PORTA &~ (1<<0);
  94:	d8 98       	cbi	0x1b, 0	; 27
	PORTA = PORTA &~ (1<<1);
  96:	d9 98       	cbi	0x1b, 1	; 27
	PORTA = PORTA | 1<<2;
  98:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	8f ec       	ldi	r24, 0xCF	; 207
  9c:	97 e0       	ldi	r25, 0x07	; 7
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_cmd_enable+0xc>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <lcd_cmd_enable+0x12>
  a4:	00 00       	nop
	_delay_ms(1);
	PORTA = PORTA &~ (1<<2);
  a6:	da 98       	cbi	0x1b, 2	; 27
  a8:	8f ec       	ldi	r24, 0xCF	; 207
  aa:	97 e0       	ldi	r25, 0x07	; 7
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <lcd_cmd_enable+0x1a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <lcd_cmd_enable+0x20>
  b2:	00 00       	nop
	_delay_ms(1);

}
  b4:	08 95       	ret

000000b6 <lcd_data_enable>:
void lcd_data_enable(char y)                 //to activate data register
{
	PORTB = y;
  b6:	88 bb       	out	0x18, r24	; 24
	PORTA = PORTA | (1<<0);
  b8:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA = PORTA &~ (1<<1);
  ba:	d9 98       	cbi	0x1b, 1	; 27
	PORTA = PORTA | 1<<2;
  bc:	da 9a       	sbi	0x1b, 2	; 27
  be:	8f ec       	ldi	r24, 0xCF	; 207
  c0:	97 e0       	ldi	r25, 0x07	; 7
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_data_enable+0xc>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_data_enable+0x12>
  c8:	00 00       	nop
	_delay_ms(1);
	PORTA = PORTA &~ (1<<2);
  ca:	da 98       	cbi	0x1b, 2	; 27
  cc:	8f ec       	ldi	r24, 0xCF	; 207
  ce:	97 e0       	ldi	r25, 0x07	; 7
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_data_enable+0x1a>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <lcd_data_enable+0x20>
  d6:	00 00       	nop
	_delay_ms(1);
	
}
  d8:	08 95       	ret

000000da <lcd_init>:

void lcd_init()
{
	lcd_cmd_enable(0x38);                   /* Initialization of 16X2 LCD in 8bit mode */
  da:	88 e3       	ldi	r24, 0x38	; 56
  dc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
	
	lcd_cmd_enable(0x0e);                    /* Display ON Cursor OFF */
  e0:	8e e0       	ldi	r24, 0x0E	; 14
  e2:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>

	lcd_cmd_enable(0x06);                     /* Auto Increment cursor */
  e6:	86 e0       	ldi	r24, 0x06	; 6
  e8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
	
}
  ec:	08 95       	ret

000000ee <lcd_string>:

void lcd_string(char *x)
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	ec 01       	movw	r28, r24
	
	while(*x!=0)
  f4:	88 81       	ld	r24, Y
  f6:	88 23       	and	r24, r24
  f8:	79 f0       	breq	.+30     	; 0x118 <lcd_string+0x2a>

	lcd_cmd_enable(0x06);                     /* Auto Increment cursor */
	
}

void lcd_string(char *x)
  fa:	21 96       	adiw	r28, 0x01	; 1
{
	
	while(*x!=0)
	{
		
		lcd_data_enable(*x);
  fc:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_data_enable>
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	90 e7       	ldi	r25, 0x70	; 112
 104:	a2 e0       	ldi	r26, 0x02	; 2
 106:	81 50       	subi	r24, 0x01	; 1
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	a0 40       	sbci	r26, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <lcd_string+0x18>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <lcd_string+0x22>
 110:	00 00       	nop
}

void lcd_string(char *x)
{
	
	while(*x!=0)
 112:	89 91       	ld	r24, Y+
 114:	88 23       	and	r24, r24
 116:	91 f7       	brne	.-28     	; 0xfc <lcd_string+0xe>
		
		lcd_data_enable(*x);
		x++;
		_delay_ms(100);
	}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <main>:
void lcd_data_enable(char );
void lcd_init(void);
void lcd_string(char *);
int main(void)
{
	DDRA = 0x07;
 11e:	87 e0       	ldi	r24, 0x07	; 7
 120:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xff;
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	87 bb       	out	0x17, r24	; 23
	
	lcd_init();
 126:	0e 94 6d 00 	call	0xda	; 0xda <lcd_init>
	lcd_cmd_enable(0x10);                         /* clear display */
 12a:	80 e1       	ldi	r24, 0x10	; 16
 12c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
	
	lcd_cmd_enable(0x80);                          /* cursor at home position */
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
	
	lcd_string("EKta Sharma");
 136:	80 e6       	ldi	r24, 0x60	; 96
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 77 00 	call	0xee	; 0xee <lcd_string>
    while(1)
    {
		for(int i=0; i<=15; i++)
 13e:	c0 e0       	ldi	r28, 0x00	; 0
 140:	d0 e0       	ldi	r29, 0x00	; 0
 142:	00 e0       	ldi	r16, 0x00	; 0
 144:	10 e0       	ldi	r17, 0x00	; 0
		{                                             //for scrawling
			lcd_cmd_enable(0x18);
 146:	88 e1       	ldi	r24, 0x18	; 24
 148:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	99 e6       	ldi	r25, 0x69	; 105
 150:	a8 e1       	ldi	r26, 0x18	; 24
 152:	81 50       	subi	r24, 0x01	; 1
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	a0 40       	sbci	r26, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0x34>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0x3e>
 15c:	00 00       	nop
	lcd_cmd_enable(0x80);                          /* cursor at home position */
	
	lcd_string("EKta Sharma");
    while(1)
    {
		for(int i=0; i<=15; i++)
 15e:	21 96       	adiw	r28, 0x01	; 1
 160:	c0 31       	cpi	r28, 0x10	; 16
 162:	d1 05       	cpc	r29, r1
 164:	84 f3       	brlt	.-32     	; 0x146 <main+0x28>
 166:	e8 01       	movw	r28, r16
 168:	ee cf       	rjmp	.-36     	; 0x146 <main+0x28>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
