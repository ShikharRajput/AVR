
counter_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000254  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000254  000002e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000002e8  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00000a40  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008eb  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000216  00000000  00000000  000013eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000513  00000000  00000000  00001601  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001b14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000157  00000000  00000000  00001bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a9  00000000  00000000  00001d2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <main>
  8a:	0c 94 28 01 	jmp	0x250	; 0x250 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ascii_conversion>:
	
}


void ascii_conversion(int a)
{
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	8c 01       	movw	r16, r24
  a0:	c2 ec       	ldi	r28, 0xC2	; 194
  a2:	d0 e0       	ldi	r29, 0x00	; 0
	char pos= 0xc2;
	int i, a1;
	for (i=0; i<3; i++)
	{
		lcd_cmd_enable(pos);
		a1= a%10;
  a4:	0f 2e       	mov	r0, r31
  a6:	fa e0       	ldi	r31, 0x0A	; 10
  a8:	ef 2e       	mov	r14, r31
  aa:	ff 24       	eor	r15, r15
  ac:	f0 2d       	mov	r31, r0
{
	char pos= 0xc2;
	int i, a1;
	for (i=0; i<3; i++)
	{
		lcd_cmd_enable(pos);
  ae:	ce 01       	movw	r24, r28
  b0:	0e 94 6d 00 	call	0xda	; 0xda <lcd_cmd_enable>
		a1= a%10;
		a = a/10;
  b4:	c8 01       	movw	r24, r16
  b6:	b7 01       	movw	r22, r14
  b8:	0e 94 01 01 	call	0x202	; 0x202 <__divmodhi4>
  bc:	8b 01       	movw	r16, r22
		lcd_data_enable(a1+48);                //asci value of zero is 48
  be:	c0 96       	adiw	r24, 0x30	; 48
  c0:	0e 94 99 00 	call	0x132	; 0x132 <lcd_data_enable>
  c4:	21 97       	sbiw	r28, 0x01	; 1

void ascii_conversion(int a)
{
	char pos= 0xc2;
	int i, a1;
	for (i=0; i<3; i++)
  c6:	cf 3b       	cpi	r28, 0xBF	; 191
  c8:	d1 05       	cpc	r29, r1
  ca:	89 f7       	brne	.-30     	; 0xae <ascii_conversion+0x1c>
		a = a/10;
		lcd_data_enable(a1+48);                //asci value of zero is 48
		pos--;
		
	}
}
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	1f 91       	pop	r17
  d2:	0f 91       	pop	r16
  d4:	ff 90       	pop	r15
  d6:	ef 90       	pop	r14
  d8:	08 95       	ret

000000da <lcd_cmd_enable>:



void lcd_cmd_enable(char x)                  //to activate command register i.e to use data pins(7-14) as command pins
{
	PORTA  = x & 0xf0;
  da:	98 2f       	mov	r25, r24
  dc:	90 7f       	andi	r25, 0xF0	; 240
  de:	9b bb       	out	0x1b, r25	; 27
	PORTA = PORTA &~ (1<<0);
  e0:	d8 98       	cbi	0x1b, 0	; 27
	PORTA = PORTA &~ (1<<1);
  e2:	d9 98       	cbi	0x1b, 1	; 27
	PORTA = PORTA | 1<<2;
  e4:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	ef ec       	ldi	r30, 0xCF	; 207
  e8:	f7 e0       	ldi	r31, 0x07	; 7
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <lcd_cmd_enable+0x10>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <lcd_cmd_enable+0x16>
  f0:	00 00       	nop
	_delay_ms(1);
	PORTA = PORTA &~ (1<<2);
  f2:	da 98       	cbi	0x1b, 2	; 27
  f4:	ef ec       	ldi	r30, 0xCF	; 207
  f6:	f7 e0       	ldi	r31, 0x07	; 7
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_cmd_enable+0x1e>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <lcd_cmd_enable+0x24>
  fe:	00 00       	nop
	_delay_ms(1);
	
	PORTA = (x<<4) & 0xf0;
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	82 95       	swap	r24
 104:	92 95       	swap	r25
 106:	90 7f       	andi	r25, 0xF0	; 240
 108:	98 27       	eor	r25, r24
 10a:	80 7f       	andi	r24, 0xF0	; 240
 10c:	98 27       	eor	r25, r24
 10e:	8b bb       	out	0x1b, r24	; 27
	PORTA = PORTA &~ (1<<0);
 110:	d8 98       	cbi	0x1b, 0	; 27
	PORTA = PORTA &~ (1<<1);
 112:	d9 98       	cbi	0x1b, 1	; 27
	PORTA = PORTA | 1<<2;
 114:	da 9a       	sbi	0x1b, 2	; 27
 116:	8f ec       	ldi	r24, 0xCF	; 207
 118:	97 e0       	ldi	r25, 0x07	; 7
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_cmd_enable+0x40>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_cmd_enable+0x46>
 120:	00 00       	nop
	_delay_ms(1);
	PORTA = PORTA &~ (1<<2);
 122:	da 98       	cbi	0x1b, 2	; 27
 124:	ef ec       	ldi	r30, 0xCF	; 207
 126:	f7 e0       	ldi	r31, 0x07	; 7
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_cmd_enable+0x4e>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_cmd_enable+0x54>
 12e:	00 00       	nop
	_delay_ms(1);

}
 130:	08 95       	ret

00000132 <lcd_data_enable>:
void lcd_data_enable(char y)                 //to activate data register
{
	char x;
	PORTA= y & 0xf0;
 132:	98 2f       	mov	r25, r24
 134:	90 7f       	andi	r25, 0xF0	; 240
 136:	9b bb       	out	0x1b, r25	; 27
	PORTA = PORTA | (1<<0);
 138:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA = PORTA &~ (1<<1);
 13a:	d9 98       	cbi	0x1b, 1	; 27
	PORTA = PORTA | 1<<2;
 13c:	da 9a       	sbi	0x1b, 2	; 27
 13e:	ef ec       	ldi	r30, 0xCF	; 207
 140:	f7 e0       	ldi	r31, 0x07	; 7
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_data_enable+0x10>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_data_enable+0x16>
 148:	00 00       	nop
	_delay_ms(1);
	PORTA = PORTA &~ (1<<2);
 14a:	da 98       	cbi	0x1b, 2	; 27
 14c:	ef ec       	ldi	r30, 0xCF	; 207
 14e:	f7 e0       	ldi	r31, 0x07	; 7
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_data_enable+0x1e>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_data_enable+0x24>
 156:	00 00       	nop
	_delay_ms(1);
	
	x = y<<4;
	PORTA = x & 0xf0;
 158:	82 95       	swap	r24
 15a:	80 7f       	andi	r24, 0xF0	; 240
 15c:	8b bb       	out	0x1b, r24	; 27
	PORTA = PORTA | (1<<0);
 15e:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA = PORTA &~ (1<<1);
 160:	d9 98       	cbi	0x1b, 1	; 27
	PORTA = PORTA | 1<<2;
 162:	da 9a       	sbi	0x1b, 2	; 27
 164:	8f ec       	ldi	r24, 0xCF	; 207
 166:	97 e0       	ldi	r25, 0x07	; 7
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <lcd_data_enable+0x36>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <lcd_data_enable+0x3c>
 16e:	00 00       	nop
	_delay_ms(1);
	PORTA = PORTA &~ (1<<2);
 170:	da 98       	cbi	0x1b, 2	; 27
 172:	ef ec       	ldi	r30, 0xCF	; 207
 174:	f7 e0       	ldi	r31, 0x07	; 7
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_data_enable+0x44>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_data_enable+0x4a>
 17c:	00 00       	nop
	_delay_ms(1);
}
 17e:	08 95       	ret

00000180 <counter_init>:

unsigned int y,z;

void counter_init()
{
	TCCR0 = 0x06;
 180:	86 e0       	ldi	r24, 0x06	; 6
 182:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0x00;
 184:	12 be       	out	0x32, r1	; 50

}
 186:	08 95       	ret

00000188 <count>:

void count()
{
	int a;
	do{
		a=TCNT0;
 188:	82 b7       	in	r24, 0x32	; 50
		ascii_conversion(a);
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 49 00 	call	0x92	; 0x92 <ascii_conversion>
		
		}while((TIFR & (1<<TOV0))==0);
 190:	08 b6       	in	r0, 0x38	; 56
 192:	00 fe       	sbrs	r0, 0
 194:	f9 cf       	rjmp	.-14     	; 0x188 <count>
	
}
 196:	08 95       	ret

00000198 <lcd_init>:
	_delay_ms(1);
}

void lcd_init()
{
	lcd_cmd_enable(0x02);                   /* cursor return to home */
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	0e 94 6d 00 	call	0xda	; 0xda <lcd_cmd_enable>
	lcd_cmd_enable(0x28);                     /* Initialization of 16X2 LCD in 4bit mode */
 19e:	88 e2       	ldi	r24, 0x28	; 40
 1a0:	0e 94 6d 00 	call	0xda	; 0xda <lcd_cmd_enable>
	lcd_cmd_enable(0x0e);                    /* Display ON Cursor OFF */
 1a4:	8e e0       	ldi	r24, 0x0E	; 14
 1a6:	0e 94 6d 00 	call	0xda	; 0xda <lcd_cmd_enable>

	lcd_cmd_enable(0x06);                     /* Auto Increment cursor */
 1aa:	86 e0       	ldi	r24, 0x06	; 6
 1ac:	0e 94 6d 00 	call	0xda	; 0xda <lcd_cmd_enable>
	
}
 1b0:	08 95       	ret

000001b2 <lcd_string>:

void lcd_string(char *x)
{
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	ec 01       	movw	r28, r24
	
	while(*x!=0)
 1b8:	88 81       	ld	r24, Y
 1ba:	88 23       	and	r24, r24
 1bc:	79 f0       	breq	.+30     	; 0x1dc <lcd_string+0x2a>

	lcd_cmd_enable(0x06);                     /* Auto Increment cursor */
	
}

void lcd_string(char *x)
 1be:	21 96       	adiw	r28, 0x01	; 1
{
	
	while(*x!=0)
	{
		
		lcd_data_enable(*x);
 1c0:	0e 94 99 00 	call	0x132	; 0x132 <lcd_data_enable>
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	94 e3       	ldi	r25, 0x34	; 52
 1c8:	ac e0       	ldi	r26, 0x0C	; 12
 1ca:	81 50       	subi	r24, 0x01	; 1
 1cc:	90 40       	sbci	r25, 0x00	; 0
 1ce:	a0 40       	sbci	r26, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <lcd_string+0x18>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <lcd_string+0x22>
 1d4:	00 00       	nop
}

void lcd_string(char *x)
{
	
	while(*x!=0)
 1d6:	89 91       	ld	r24, Y+
 1d8:	88 23       	and	r24, r24
 1da:	91 f7       	brne	.-28     	; 0x1c0 <lcd_string+0xe>
		
		lcd_data_enable(*x);
		x++;
		_delay_ms(500);
	}
}	
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <main>:


int main(void)
{
	DDRA = 0x00;
 1e2:	1a ba       	out	0x1a, r1	; 26
	DDRA = 0xff;
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	8a bb       	out	0x1a, r24	; 26
	counter_init();
 1e8:	0e 94 c0 00 	call	0x180	; 0x180 <counter_init>
	
	lcd_init();
 1ec:	0e 94 cc 00 	call	0x198	; 0x198 <lcd_init>
	//adc_init();
	lcd_cmd_enable(0x10);                         /* clear display */
 1f0:	80 e1       	ldi	r24, 0x10	; 16
 1f2:	0e 94 6d 00 	call	0xda	; 0xda <lcd_cmd_enable>
	
	lcd_cmd_enable(0x80);                          /* cursor at home position */
 1f6:	80 e8       	ldi	r24, 0x80	; 128
 1f8:	0e 94 6d 00 	call	0xda	; 0xda <lcd_cmd_enable>
	
	
	while(1)
	{
		count();
 1fc:	0e 94 c4 00 	call	0x188	; 0x188 <count>
 200:	fd cf       	rjmp	.-6      	; 0x1fc <main+0x1a>

00000202 <__divmodhi4>:
 202:	97 fb       	bst	r25, 7
 204:	09 2e       	mov	r0, r25
 206:	07 26       	eor	r0, r23
 208:	0a d0       	rcall	.+20     	; 0x21e <__divmodhi4_neg1>
 20a:	77 fd       	sbrc	r23, 7
 20c:	04 d0       	rcall	.+8      	; 0x216 <__divmodhi4_neg2>
 20e:	0c d0       	rcall	.+24     	; 0x228 <__udivmodhi4>
 210:	06 d0       	rcall	.+12     	; 0x21e <__divmodhi4_neg1>
 212:	00 20       	and	r0, r0
 214:	1a f4       	brpl	.+6      	; 0x21c <__divmodhi4_exit>

00000216 <__divmodhi4_neg2>:
 216:	70 95       	com	r23
 218:	61 95       	neg	r22
 21a:	7f 4f       	sbci	r23, 0xFF	; 255

0000021c <__divmodhi4_exit>:
 21c:	08 95       	ret

0000021e <__divmodhi4_neg1>:
 21e:	f6 f7       	brtc	.-4      	; 0x21c <__divmodhi4_exit>
 220:	90 95       	com	r25
 222:	81 95       	neg	r24
 224:	9f 4f       	sbci	r25, 0xFF	; 255
 226:	08 95       	ret

00000228 <__udivmodhi4>:
 228:	aa 1b       	sub	r26, r26
 22a:	bb 1b       	sub	r27, r27
 22c:	51 e1       	ldi	r21, 0x11	; 17
 22e:	07 c0       	rjmp	.+14     	; 0x23e <__udivmodhi4_ep>

00000230 <__udivmodhi4_loop>:
 230:	aa 1f       	adc	r26, r26
 232:	bb 1f       	adc	r27, r27
 234:	a6 17       	cp	r26, r22
 236:	b7 07       	cpc	r27, r23
 238:	10 f0       	brcs	.+4      	; 0x23e <__udivmodhi4_ep>
 23a:	a6 1b       	sub	r26, r22
 23c:	b7 0b       	sbc	r27, r23

0000023e <__udivmodhi4_ep>:
 23e:	88 1f       	adc	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	5a 95       	dec	r21
 244:	a9 f7       	brne	.-22     	; 0x230 <__udivmodhi4_loop>
 246:	80 95       	com	r24
 248:	90 95       	com	r25
 24a:	bc 01       	movw	r22, r24
 24c:	cd 01       	movw	r24, r26
 24e:	08 95       	ret

00000250 <_exit>:
 250:	f8 94       	cli

00000252 <__stop_program>:
 252:	ff cf       	rjmp	.-2      	; 0x252 <__stop_program>
