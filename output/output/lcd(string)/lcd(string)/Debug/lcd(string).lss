
lcd(string).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000138  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000910  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000541  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000185  00000000  00000000  00000ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000373  00000000  00000000  00001056  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000013cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000013a  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000dd  00000000  00000000  00001576  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  8a:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_cmd_enable>:
}


void lcd_cmd_enable(char x)
{
	PORTB  = x;
  92:	88 bb       	out	0x18, r24	; 24
	PORTA = PORTA &~ (1<<0);
  94:	d8 98       	cbi	0x1b, 0	; 27
	PORTA = PORTA &~ (1<<1);
  96:	d9 98       	cbi	0x1b, 1	; 27
	PORTA = PORTA | 1<<2;
  98:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	89 ef       	ldi	r24, 0xF9	; 249
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_cmd_enable+0xc>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <lcd_cmd_enable+0x12>
  a4:	00 00       	nop
	_delay_ms(1);
	PORTA = PORTA &~ (1<<2);
  a6:	da 98       	cbi	0x1b, 2	; 27
  a8:	89 ef       	ldi	r24, 0xF9	; 249
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <lcd_cmd_enable+0x1a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <lcd_cmd_enable+0x20>
  b2:	00 00       	nop
	_delay_ms(1);

}
  b4:	08 95       	ret

000000b6 <lcd_data_enable>:
void lcd_data_enable(char y)
{
	PORTB = y;
  b6:	88 bb       	out	0x18, r24	; 24
	PORTA = PORTA | (1<<0);
  b8:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA = PORTA &~ (1<<1);
  ba:	d9 98       	cbi	0x1b, 1	; 27
	PORTA = PORTA | 1<<2;
  bc:	da 9a       	sbi	0x1b, 2	; 27
  be:	89 ef       	ldi	r24, 0xF9	; 249
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_data_enable+0xc>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_data_enable+0x12>
  c8:	00 00       	nop
	_delay_ms(1);
	PORTA = PORTA &~ (1<<2);
  ca:	da 98       	cbi	0x1b, 2	; 27
  cc:	89 ef       	ldi	r24, 0xF9	; 249
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_data_enable+0x1a>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <lcd_data_enable+0x20>
  d6:	00 00       	nop
	_delay_ms(1);
	
}
  d8:	08 95       	ret

000000da <lcd_init>:

void lcd_init()
{
	lcd_cmd_enable(0x38);
  da:	88 e3       	ldi	r24, 0x38	; 56
  dc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
	
	lcd_cmd_enable(0x0e);
  e0:	8e e0       	ldi	r24, 0x0E	; 14
  e2:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>

	lcd_cmd_enable(0x06);
  e6:	86 e0       	ldi	r24, 0x06	; 6
  e8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
	
}
  ec:	08 95       	ret

000000ee <lcd_string>:

void lcd_string(char *x)
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	ec 01       	movw	r28, r24
	
	while(*x!=0)
  f4:	88 81       	ld	r24, Y
  f6:	88 23       	and	r24, r24
  f8:	61 f0       	breq	.+24     	; 0x112 <lcd_string+0x24>

	lcd_cmd_enable(0x06);
	
}

void lcd_string(char *x)
  fa:	21 96       	adiw	r28, 0x01	; 1
{
	
	while(*x!=0)
	{
		
		lcd_data_enable(*x);
  fc:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_data_enable>
 100:	87 ea       	ldi	r24, 0xA7	; 167
 102:	91 e6       	ldi	r25, 0x61	; 97
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <lcd_string+0x16>
 108:	00 c0       	rjmp	.+0      	; 0x10a <lcd_string+0x1c>
 10a:	00 00       	nop
}

void lcd_string(char *x)
{
	
	while(*x!=0)
 10c:	89 91       	ld	r24, Y+
 10e:	88 23       	and	r24, r24
 110:	a9 f7       	brne	.-22     	; 0xfc <lcd_string+0xe>
		
		lcd_data_enable(*x);
		x++;
		_delay_ms(100);
	}
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <main>:
void lcd_data_enable(char );
void lcd_init(void);
void lcd_string(char *);
int main(void)
{
	DDRA = 0x07;
 118:	87 e0       	ldi	r24, 0x07	; 7
 11a:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xff;
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	87 bb       	out	0x17, r24	; 23
	
	lcd_init();
 120:	0e 94 6d 00 	call	0xda	; 0xda <lcd_init>
	lcd_cmd_enable(0x80);
 124:	80 e8       	ldi	r24, 0x80	; 128
 126:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
	
	lcd_string("EKta Sharma");
 12a:	80 e6       	ldi	r24, 0x60	; 96
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 77 00 	call	0xee	; 0xee <lcd_string>
 132:	ff cf       	rjmp	.-2      	; 0x132 <main+0x1a>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
