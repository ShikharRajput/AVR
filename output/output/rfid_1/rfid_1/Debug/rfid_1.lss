
rfid_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000001aa  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800068  00800068  00000246  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  000009a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000047d  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000174  00000000  00000000  00000e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000034f  00000000  00000000  00001011  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000005c  00000000  00000000  00001360  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000fc  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011b  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cb 00 	call	0x196	; 0x196 <main>
  8a:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <usart_init>:
	
int i,n=5;

void usart_init()
{
	UCSRB = UCSRB |1<<RXEN;
  92:	54 9a       	sbi	0x0a, 4	; 10
	UCSRC = UCSRC | 1<<URSEL | 1<< UCSZ0 | 1<< UCSZ1;
  94:	80 b5       	in	r24, 0x20	; 32
  96:	86 68       	ori	r24, 0x86	; 134
  98:	80 bd       	out	0x20, r24	; 32
	UBRRL = 0x33;
  9a:	83 e3       	ldi	r24, 0x33	; 51
  9c:	89 b9       	out	0x09, r24	; 9
	
	
}
  9e:	08 95       	ret

000000a0 <Rx>:

char Rx()
{
  a0:	0f 93       	push	r16
  a2:	1f 93       	push	r17
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
		PORTA |= 0x01;
			
			
	}
	
}
  ac:	6d b7       	in	r22, 0x3d	; 61
  ae:	7e b7       	in	r23, 0x3e	; 62
	
}

char Rx()
{
	char RD[n];
  b0:	20 91 60 00 	lds	r18, 0x0060
  b4:	30 91 61 00 	lds	r19, 0x0061
  b8:	8d b7       	in	r24, 0x3d	; 61
  ba:	9e b7       	in	r25, 0x3e	; 62
  bc:	82 1b       	sub	r24, r18
  be:	93 0b       	sbc	r25, r19
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	f8 94       	cli
  c4:	9e bf       	out	0x3e, r25	; 62
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	8d bf       	out	0x3d, r24	; 61
  ca:	ed b7       	in	r30, 0x3d	; 61
  cc:	fe b7       	in	r31, 0x3e	; 62
  ce:	31 96       	adiw	r30, 0x01	; 1
  d0:	af 01       	movw	r20, r30

	for( i =0; i<n ; i++)
  d2:	10 92 69 00 	sts	0x0069, r1
  d6:	10 92 68 00 	sts	0x0068, r1
  da:	12 16       	cp	r1, r18
  dc:	13 06       	cpc	r1, r19
  de:	0c f0       	brlt	.+2      	; 0xe2 <Rx+0x42>
  e0:	44 c0       	rjmp	.+136    	; 0x16a <Rx+0xca>
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
		{	
			
			while((UCSRA&(1<< RXC))==0){}
  e6:	5f 9b       	sbis	0x0b, 7	; 11
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <Rx+0x46>
			RD[i] = UDR;
  ea:	2c b1       	in	r18, 0x0c	; 12
  ec:	84 0f       	add	r24, r20
  ee:	95 1f       	adc	r25, r21
  f0:	dc 01       	movw	r26, r24
  f2:	2c 93       	st	X, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	89 ef       	ldi	r24, 0xF9	; 249
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <Rx+0x58>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <Rx+0x5e>
  fe:	00 00       	nop

char Rx()
{
	char RD[n];

	for( i =0; i<n ; i++)
 100:	80 91 68 00 	lds	r24, 0x0068
 104:	90 91 69 00 	lds	r25, 0x0069
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	90 93 69 00 	sts	0x0069, r25
 10e:	80 93 68 00 	sts	0x0068, r24
 112:	20 91 60 00 	lds	r18, 0x0060
 116:	30 91 61 00 	lds	r19, 0x0061
 11a:	82 17       	cp	r24, r18
 11c:	93 07       	cpc	r25, r19
 11e:	1c f3       	brlt	.-58     	; 0xe6 <Rx+0x46>
 120:	a9 01       	movw	r20, r18
		}
		
	
	
	
	for(i = 0 ; i<n; i++)	
 122:	10 92 69 00 	sts	0x0069, r1
 126:	10 92 68 00 	sts	0x0068, r1
 12a:	12 16       	cp	r1, r18
 12c:	13 06       	cpc	r1, r19
 12e:	04 f5       	brge	.+64     	; 0x170 <Rx+0xd0>
	{
		if( RD[i]!=arr[i])
 130:	90 81       	ld	r25, Z
 132:	80 91 62 00 	lds	r24, 0x0062
 136:	98 17       	cp	r25, r24
 138:	f1 f4       	brne	.+60     	; 0x176 <Rx+0xd6>
	UBRRL = 0x33;
	
	
}

char Rx()
 13a:	31 96       	adiw	r30, 0x01	; 1
	
	
	
	for(i = 0 ; i<n; i++)	
	{
		if( RD[i]!=arr[i])
 13c:	a3 e6       	ldi	r26, 0x63	; 99
 13e:	b0 e0       	ldi	r27, 0x00	; 0
		}
		
	
	
	
	for(i = 0 ; i<n; i++)	
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	09 c0       	rjmp	.+18     	; 0x158 <Rx+0xb8>
	{
		if( RD[i]!=arr[i])
 146:	01 91       	ld	r16, Z+
 148:	1d 91       	ld	r17, X+
 14a:	01 17       	cp	r16, r17
 14c:	29 f0       	breq	.+10     	; 0x158 <Rx+0xb8>
 14e:	80 93 68 00 	sts	0x0068, r24
 152:	90 93 69 00 	sts	0x0069, r25
 156:	11 c0       	rjmp	.+34     	; 0x17a <Rx+0xda>
		}
		
	
	
	
	for(i = 0 ; i<n; i++)	
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	84 17       	cp	r24, r20
 15c:	95 07       	cpc	r25, r21
 15e:	99 f7       	brne	.-26     	; 0x146 <Rx+0xa6>
 160:	90 93 69 00 	sts	0x0069, r25
 164:	80 93 68 00 	sts	0x0068, r24
 168:	0b c0       	rjmp	.+22     	; 0x180 <Rx+0xe0>
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	05 c0       	rjmp	.+10     	; 0x17a <Rx+0xda>
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <Rx+0xda>
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
			{
				break;
				
			}
	}
	if(i==n)
 17a:	82 17       	cp	r24, r18
 17c:	93 07       	cpc	r25, r19
 17e:	09 f4       	brne	.+2      	; 0x182 <Rx+0xe2>
	{
		PORTA |= 0x01;
 180:	d8 9a       	sbi	0x1b, 0	; 27
			
			
	}
	
}
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	f8 94       	cli
 186:	7e bf       	out	0x3e, r23	; 62
 188:	0f be       	out	0x3f, r0	; 63
 18a:	6d bf       	out	0x3d, r22	; 61
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	0f 91       	pop	r16
 194:	08 95       	ret

00000196 <main>:


int main(void)
{ 
	DDRA = 0x01;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0x00;
 19a:	11 ba       	out	0x11, r1	; 17
	usart_init();
 19c:	0e 94 49 00 	call	0x92	; 0x92 <usart_init>
    while(1)
    {
		Rx();
 1a0:	0e 94 50 00 	call	0xa0	; 0xa0 <Rx>
 1a4:	fd cf       	rjmp	.-6      	; 0x1a0 <main+0xa>

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
