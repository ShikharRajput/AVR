
lcd_(4bit_mode).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000001ce  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000009a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069a  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000019d  00000000  00000000  000010c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003cb  00000000  00000000  0000125f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  0000162c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000013f  00000000  00000000  0000169c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000100  00000000  00000000  000017db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c1 00 	call	0x182	; 0x182 <main>
  8a:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_cmd_enable>:
}


void lcd_cmd_enable(char x)                  //to activate command register i.e to use data pins(7-14) as command pins
{
	PORTA  = x & 0xf0;
  92:	98 2f       	mov	r25, r24
  94:	90 7f       	andi	r25, 0xF0	; 240
  96:	9b bb       	out	0x1b, r25	; 27
	PORTA = PORTA &~ (1<<0);
  98:	d8 98       	cbi	0x1b, 0	; 27
	PORTA = PORTA &~ (1<<1);
  9a:	d9 98       	cbi	0x1b, 1	; 27
	PORTA = PORTA | 1<<2;
  9c:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	ef ec       	ldi	r30, 0xCF	; 207
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <lcd_cmd_enable+0x10>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <lcd_cmd_enable+0x16>
  a8:	00 00       	nop
	_delay_ms(1);
	PORTA = PORTA &~ (1<<2);
  aa:	da 98       	cbi	0x1b, 2	; 27
  ac:	ef ec       	ldi	r30, 0xCF	; 207
  ae:	f7 e0       	ldi	r31, 0x07	; 7
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <lcd_cmd_enable+0x1e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <lcd_cmd_enable+0x24>
  b6:	00 00       	nop
	_delay_ms(1);
	
	PORTA = (x<<4) & 0xf0;
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	82 95       	swap	r24
  bc:	92 95       	swap	r25
  be:	90 7f       	andi	r25, 0xF0	; 240
  c0:	98 27       	eor	r25, r24
  c2:	80 7f       	andi	r24, 0xF0	; 240
  c4:	98 27       	eor	r25, r24
  c6:	8b bb       	out	0x1b, r24	; 27
	PORTA = PORTA &~ (1<<0);
  c8:	d8 98       	cbi	0x1b, 0	; 27
	PORTA = PORTA &~ (1<<1);
  ca:	d9 98       	cbi	0x1b, 1	; 27
	PORTA = PORTA | 1<<2;
  cc:	da 9a       	sbi	0x1b, 2	; 27
  ce:	8f ec       	ldi	r24, 0xCF	; 207
  d0:	97 e0       	ldi	r25, 0x07	; 7
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <lcd_cmd_enable+0x40>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <lcd_cmd_enable+0x46>
  d8:	00 00       	nop
	_delay_ms(1);
	PORTA = PORTA &~ (1<<2);
  da:	da 98       	cbi	0x1b, 2	; 27
  dc:	ef ec       	ldi	r30, 0xCF	; 207
  de:	f7 e0       	ldi	r31, 0x07	; 7
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_cmd_enable+0x4e>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_cmd_enable+0x54>
  e6:	00 00       	nop
	_delay_ms(1);

}
  e8:	08 95       	ret

000000ea <lcd_data_enable>:
void lcd_data_enable(char y)                 //to activate data register
{
	char x;
	PORTA= y & 0xf0;
  ea:	98 2f       	mov	r25, r24
  ec:	90 7f       	andi	r25, 0xF0	; 240
  ee:	9b bb       	out	0x1b, r25	; 27
	PORTA = PORTA | (1<<0);
  f0:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA = PORTA &~ (1<<1);
  f2:	d9 98       	cbi	0x1b, 1	; 27
	PORTA = PORTA | 1<<2;
  f4:	da 9a       	sbi	0x1b, 2	; 27
  f6:	ef ec       	ldi	r30, 0xCF	; 207
  f8:	f7 e0       	ldi	r31, 0x07	; 7
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <lcd_data_enable+0x10>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <lcd_data_enable+0x16>
 100:	00 00       	nop
	_delay_ms(1);
	PORTA = PORTA &~ (1<<2);
 102:	da 98       	cbi	0x1b, 2	; 27
 104:	ef ec       	ldi	r30, 0xCF	; 207
 106:	f7 e0       	ldi	r31, 0x07	; 7
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_data_enable+0x1e>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <lcd_data_enable+0x24>
 10e:	00 00       	nop
	_delay_ms(1);
	
	x = y<<4;
	PORTA = x & 0xf0;
 110:	82 95       	swap	r24
 112:	80 7f       	andi	r24, 0xF0	; 240
 114:	8b bb       	out	0x1b, r24	; 27
	PORTA = PORTA | (1<<0);
 116:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA = PORTA &~ (1<<1);
 118:	d9 98       	cbi	0x1b, 1	; 27
	PORTA = PORTA | 1<<2;
 11a:	da 9a       	sbi	0x1b, 2	; 27
 11c:	8f ec       	ldi	r24, 0xCF	; 207
 11e:	97 e0       	ldi	r25, 0x07	; 7
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <lcd_data_enable+0x36>
 124:	00 c0       	rjmp	.+0      	; 0x126 <lcd_data_enable+0x3c>
 126:	00 00       	nop
	_delay_ms(1);
	PORTA = PORTA &~ (1<<2);
 128:	da 98       	cbi	0x1b, 2	; 27
 12a:	ef ec       	ldi	r30, 0xCF	; 207
 12c:	f7 e0       	ldi	r31, 0x07	; 7
 12e:	31 97       	sbiw	r30, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_data_enable+0x44>
 132:	00 c0       	rjmp	.+0      	; 0x134 <lcd_data_enable+0x4a>
 134:	00 00       	nop
	_delay_ms(1);	
}
 136:	08 95       	ret

00000138 <lcd_init>:

void lcd_init()
{
	lcd_cmd_enable(0x02);                   /* cursor return to home */
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
	lcd_cmd_enable(0x28);                     /* Initialization of 16X2 LCD in 4bit mode */
 13e:	88 e2       	ldi	r24, 0x28	; 40
 140:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
	lcd_cmd_enable(0x0e);                    /* Display ON Cursor OFF */
 144:	8e e0       	ldi	r24, 0x0E	; 14
 146:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>

	lcd_cmd_enable(0x06);                     /* Auto Increment cursor */
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
	
}
 150:	08 95       	ret

00000152 <lcd_string>:

void lcd_string(char *x)
{
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ec 01       	movw	r28, r24
	
	while(*x!=0)
 158:	88 81       	ld	r24, Y
 15a:	88 23       	and	r24, r24
 15c:	79 f0       	breq	.+30     	; 0x17c <lcd_string+0x2a>

	lcd_cmd_enable(0x06);                     /* Auto Increment cursor */
	
}

void lcd_string(char *x)
 15e:	21 96       	adiw	r28, 0x01	; 1
{
	
	while(*x!=0)
	{
		
		lcd_data_enable(*x);
 160:	0e 94 75 00 	call	0xea	; 0xea <lcd_data_enable>
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	94 e3       	ldi	r25, 0x34	; 52
 168:	ac e0       	ldi	r26, 0x0C	; 12
 16a:	81 50       	subi	r24, 0x01	; 1
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	a0 40       	sbci	r26, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <lcd_string+0x18>
 172:	00 c0       	rjmp	.+0      	; 0x174 <lcd_string+0x22>
 174:	00 00       	nop
}

void lcd_string(char *x)
{
	
	while(*x!=0)
 176:	89 91       	ld	r24, Y+
 178:	88 23       	and	r24, r24
 17a:	91 f7       	brne	.-28     	; 0x160 <lcd_string+0xe>
		
		lcd_data_enable(*x);
		x++;
		_delay_ms(500);
	}
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <main>:
void lcd_data_enable(char );
void lcd_init(void);
void lcd_string(char *);
int main(void)
{
	DDRA = 0xf7;
 182:	87 ef       	ldi	r24, 0xF7	; 247
 184:	8a bb       	out	0x1a, r24	; 26
	
	lcd_init();
 186:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_init>
	lcd_cmd_enable(0x10);                         /* clear display */
 18a:	80 e1       	ldi	r24, 0x10	; 16
 18c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
	
	lcd_cmd_enable(0x80);                          /* cursor at home position */
 190:	80 e8       	ldi	r24, 0x80	; 128
 192:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
	
	lcd_string("Ekta Sharma");
 196:	80 e6       	ldi	r24, 0x60	; 96
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_string>
    while(1)
    {
		for(int i=0; i<=15; i++)
 19e:	c0 e0       	ldi	r28, 0x00	; 0
 1a0:	d0 e0       	ldi	r29, 0x00	; 0
 1a2:	00 e0       	ldi	r16, 0x00	; 0
 1a4:	10 e0       	ldi	r17, 0x00	; 0
		{                                             //for scrawling
			lcd_cmd_enable(0x18);
 1a6:	88 e1       	ldi	r24, 0x18	; 24
 1a8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd_enable>
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	99 e6       	ldi	r25, 0x69	; 105
 1b0:	a8 e1       	ldi	r26, 0x18	; 24
 1b2:	81 50       	subi	r24, 0x01	; 1
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	a0 40       	sbci	r26, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <main+0x30>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <main+0x3a>
 1bc:	00 00       	nop
	lcd_cmd_enable(0x80);                          /* cursor at home position */
	
	lcd_string("Ekta Sharma");
    while(1)
    {
		for(int i=0; i<=15; i++)
 1be:	21 96       	adiw	r28, 0x01	; 1
 1c0:	c0 31       	cpi	r28, 0x10	; 16
 1c2:	d1 05       	cpc	r29, r1
 1c4:	84 f3       	brlt	.-32     	; 0x1a6 <main+0x24>
 1c6:	e8 01       	movw	r28, r16
 1c8:	ee cf       	rjmp	.-36     	; 0x1a6 <main+0x24>

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
